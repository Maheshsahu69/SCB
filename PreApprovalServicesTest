import { act, cleanup, fireEvent, render } from "@testing-library/react";

import { getData, getDataFormConfig, getDedupeData, getEnquiryData, getGenerateOtp, getPDFData, getProductMetaDataInfo, getRandomChallenge, getSessionByPreLogin, getVerifyOtp, getOffer, getOffer2 } from "./preApprovalServices";
import * as commonService from "../../../services/common-service";
import { payloadFormConfig } from './payload';
import axios from 'axios';
import payload from "../../../services/payload";
import PreApprovalUtil from "./preApprovalUtils";
import { store } from "../../../utils/store/store";
import { useDispatch } from "react-redux";
import { getStageName } from "../../dashboard/fields/stage.utils";
import { stagesAction } from "../../../utils/store/stages-slice";
import { stages } from "./stageInfo";
import { preApprovalAction } from "../store/preApproval-slice";
import { getUrl } from "../../../utils/common/change.utils";

jest.mock("axios", () => ({
  __esModule: false
}));

let scClientContextHeaders: any = {
  Channel: "MOBILE",
  loginType: "PRE",
  Country: "HK",
  Language: "EN",
  AppName: "RCWB",
  ClientId: "MOBILE",
  InstanceCode: "CB_HK",
  RumDevice: "devicebrowserversion",
  Source: "sc.com",
  DeviceType: "MOBILE",
  subChannelCode: "",
  sessionUID: "12323432432",
  BrowserAgent: "DESKTOP-BROWSER",
  IPAddress: ""
};
jest.mock('axios');
const mockedAxios = axios as jest.Mocked<typeof axios>;
const mockData = { isError: true };
const dispatchResultRecorder = {} as any;
jest.spyOn(commonService, 'dispatchError');
jest.spyOn(PreApprovalUtil, 'getAckMetaData').mockReturnValue(scClientContextHeaders);
window.URL.createObjectURL = jest.fn(() => 'details');
jest.spyOn(preApprovalAction, 'setFormConfigMetaData').mockReturnValue(scClientContextHeaders);
export type AppDispatch = typeof store.dispatch;
const mockDispatch = jest.fn();
const mockUseDispatch = jest.fn().mockReturnValue(mockDispatch);

let dispatch = store.dispatch;

jest.mock('react-redux', () => ({
  ...jest.requireActual('react-redux'),
  useDispatch: jest.fn(),
}));


const fakeDispatch = (action: any) => {
  let payload = action.payload;
  if (payload === undefined) {
    payload = 'void';
  }
  dispatchResultRecorder[action.type] = payload;
};
dispatch = jest.fn().mockResolvedValue(fakeDispatch);

afterEach(() => {
  jest.resetAllMocks();
});
afterAll(() => {
  cleanup();
  jest.clearAllMocks();
});

const mockRespose = { data: { file: 'pdf' }, status: 200 }
describe("call PIL service", () => {


  beforeEach(() => {
    jest.clearAllMocks();
    dispatch = jest.fn().mockResolvedValue(fakeDispatch);

  })
  test("should call getData", async () => {

    mockedAxios.get = jest.fn().mockResolvedValue(mockRespose);
    const result = await getData('URL');
    expect(result).toEqual(mockRespose);

  });

  test("should call getData error", async () => {
    mockedAxios.get = jest.fn().mockRejectedValue({ message: 'error', code: '201' });
    //  const result= await getData('URL');
    // expect(result).toEqual(mockData);
  });

  test("should call getPDFData", async () => {
    mockedAxios.get = jest.fn().mockResolvedValue(mockRespose);
    window.URL.createObjectURL = jest.fn(() => 'details');
    const result = await getPDFData('URL');
  
    expect(result).toEqual('details');

  });

  test("should call getDataFormConfig", async () => {
    const mockedAxios = axios as jest.Mocked<typeof axios>;
    mockedAxios.post = jest.fn().mockResolvedValueOnce(mockRespose);
    const data = await getDataFormConfig(payloadFormConfig)(mockDispatch)
    expect(data).toEqual(mockRespose);
    expect(axios.post).toHaveBeenCalled();
  });

  test("should call getSessionByPreLogin", async () => {
    mockedAxios.request = jest.fn().mockResolvedValue(mockRespose);
    const result = await getSessionByPreLogin();
    expect(result).toEqual(mockRespose);
  });
  test("should call ProductMetaDataInfo", async () => {
    jest.spyOn(getUrl, 'getParameterByName');
    const mockRespose = { data: { products: 'PIL' }, status: 200 }
    const mockedAxios = axios as jest.Mocked<typeof axios>;
    mockedAxios.request = jest.fn().mockResolvedValue(mockRespose);
    const data = await getProductMetaDataInfo('urlparam')(mockDispatch)
    expect(axios.request).toHaveBeenCalled();
  });
  test("should call getRandomChallenge", async () => {

    mockedAxios.post = jest.fn().mockResolvedValue(mockRespose);
    const result = await getRandomChallenge("23432423432");
    console.log("Result" + JSON.stringify(result));
    expect(result).toEqual(mockRespose);
  });

  test("should call getGenerateOtp", async () => {
    mockedAxios.post = jest.fn().mockResolvedValue(mockRespose);
    const result = await getGenerateOtp('asdsada');
    // console.log("Result" + JSON.stringify(result));
    // expect(result).toEqual(mockRespose);
  });

  test("should call getVerifyOtp", async () => {
    mockedAxios.post = jest.fn().mockResolvedValue(mockRespose);
    const result = await getVerifyOtp("233", '1312', "21321", "3aasda");
    console.log("Result" + JSON.stringify(result));
    expect(result).toEqual(mockRespose);
  });


  test("should call getEnquiryData", async () => {
    mockedAxios.post = jest.fn().mockResolvedValue(mockRespose);
    const result = await getEnquiryData("sasa","asdsa","1221312");
    console.log("Result" + JSON.stringify(result));
    expect(result).toEqual(mockRespose);
  });

  test("should call getDedupeData", async () => {
    mockedAxios.post = jest.fn().mockResolvedValue(mockRespose);
    const dispatch=store.dispatch;
    dispatch( stagesAction.getStage(stages))

   // store.getState().stages.stages[0].stageInfo={data:"adasdas"};
    const result = await getDedupeData("sasa");//(mockDispatch);
    console.log("Result" + JSON.stringify(result));
    expect(result).toEqual(mockRespose);
  });
});








