import { render, screen, fireEvent, waitFor } from "@testing-library/react";
import { Provider, useDispatch, useSelector } from "react-redux";
import { configureStore } from "@reduxjs/toolkit";
import { preApprovalAction } from "../../../../preApproval/store/preApproval-slice";
import DocumentUploadSRC2 from "../document-upload-scr2/document-upload-scr2";
import {
  postDocuments,
  postZOLOCheck,
  postZolozAcknowledge,
} from "../../../../preApproval/services/preApprovalPostServices";
import { dispatchLoader } from "../../../../../services/common-service";

// Mocking Redux hooks and services
jest.mock("react-redux", () => ({
  useDispatch: jest.fn(),
  useSelector: jest.fn(),
}));
jest.mock("axios", () => ({
  __esModule: true,
}));

jest.mock("@lottiefiles/react-lottie-player", () => ({
  __esModule: true,
  Player: jest.fn().mockReturnValue(null),
}));

jest.mock("../../../../preApproval/services/preApprovalPostServices", () => ({
  postDocuments: jest.fn(),
  postZOLOCheck: jest.fn(),
  postZolozAcknowledge: jest.fn(),
}));

jest.mock("../../../../../services/common-service", () => ({
  dispatchLoader: jest.fn(),
}));

describe("DocumentUploadSRC2", () => {
  const mockDispatch = jest.fn();
  const setShowIncomeProof = jest.fn();
  const setDocumentCount = jest.fn();
  const documentCount = 0;
  const changeSuccessState = jest.fn();
  const showQRCodePage = false;
  const setShowQRCodePage = jest.fn();
  const setChangeIconColorIdentityProof = jest.fn();
  const showUploadFileSuccess = false;
  const setShowUploadFileSuccess = jest.fn();
  const channel_reference = "test-channel";
  const HKIDQRCodeData = { transactionId: "test-id", qrCode: "test-qrcode" };
  const setHKIDVersion = jest.fn();
  const HKIDVersionValue = "test-version";
  const setShowContinueBtn = jest.fn();
  const setDocumentData = jest.fn();
  const setZolozDocumentData = jest.fn();
  const setSucsess = jest.fn();
  const success = false;
  const setChangeIconIncomeProof = jest.fn();
  const changeIconIncomeProof = false;
  const documentStatus = "UPLOADED";
  let store: any;

  beforeEach(() => {
    (useDispatch as jest.Mock).mockReturnValue(mockDispatch);
    (useSelector as jest.Mock).mockImplementation(
      (
        callback: (arg0: {
          stages: { stages: { stageInfo: {} }[] };
          preApproval: { incomeProofDocumentUpload: never[] };
        }) => any
      ) =>
        callback({
          stages: { stages: [{ stageInfo: {} }] },
          preApproval: { incomeProofDocumentUpload: [] },
        })
    );
    (postDocuments as jest.Mock).mockResolvedValue({
      statusText: "Accepted",
      data: {},
    });
    (postZOLOCheck as jest.Mock).mockResolvedValue({
      data: { documents: [{ docId: "test-doc" }] },
    });
    (postZolozAcknowledge as jest.Mock).mockResolvedValue({
      data: [{ responseStatus: "Success" }],
    });
    (dispatchLoader as jest.Mock).mockReturnValue(null);
  });

  test("should render the component correctly", () => {
    render(
      <DocumentUploadSRC2
        setShowIncomeProof={setShowIncomeProof}
        setDocumentCount={setDocumentCount}
        documentCount={documentCount}
        changeSuccessState={changeSuccessState}
        showQRCodePage={showQRCodePage}
        setShowQRCodePage={setShowQRCodePage}
        setChangeIconColorIdentityProof={setChangeIconColorIdentityProof}
        showUploadFileSuccess={showUploadFileSuccess}
        setShowUploadFileSuccess={setShowUploadFileSuccess}
        channel_reference={channel_reference}
        HKIDQRCodeData={HKIDQRCodeData}
        setHKIDVersion={setHKIDVersion}
        HKIDVersionValue={HKIDVersionValue}
        setShowContinueBtn={setShowContinueBtn}
        setDocumentData={setDocumentData}
        setZolozDocumentData={setZolozDocumentData}
        setSucsess={setSucsess}
        success={success}
        setChangeIconIncomeProof={setChangeIconIncomeProof}
        changeIconIncomeProof={changeIconIncomeProof}
      />
    );
    expect(screen.getByText("Income Proof")).toBeInTheDocument();
  });

  test("should display success modal when success is true", async () => {
    render(
      <DocumentUploadSRC2
        setShowIncomeProof={setShowIncomeProof}
        setDocumentCount={setDocumentCount}
        documentCount={documentCount}
        changeSuccessState={changeSuccessState}
        showQRCodePage={showQRCodePage}
        setShowQRCodePage={setShowQRCodePage}
        setChangeIconColorIdentityProof={setChangeIconColorIdentityProof}
        showUploadFileSuccess={showUploadFileSuccess}
        setShowUploadFileSuccess={setShowUploadFileSuccess}
        channel_reference={channel_reference}
        HKIDQRCodeData={HKIDQRCodeData}
        setHKIDVersion={setHKIDVersion}
        HKIDVersionValue={HKIDVersionValue}
        setShowContinueBtn={setShowContinueBtn}
        setDocumentData={setDocumentData}
        setZolozDocumentData={setZolozDocumentData}
        setSucsess={setSucsess}
        success={true}
        setChangeIconIncomeProof={setChangeIconIncomeProof}
        changeIconIncomeProof={changeIconIncomeProof}
      />
    );
    fireEvent.click(screen.getByTitle('Income Proof'));
    expect(screen.getByText("Income Proof")).toBeInTheDocument();
    expect(screen.getByText("© Standard Chartered Bank (HK) Limited")).toBeInTheDocument();

    
  });

  test("should handle file upload correctly", async () => {
    render(
      <DocumentUploadSRC2
        setShowIncomeProof={setShowIncomeProof}
        setDocumentCount={setDocumentCount}
        documentCount={documentCount}
        changeSuccessState={changeSuccessState}
        showQRCodePage={showQRCodePage}
        setShowQRCodePage={setShowQRCodePage}
        setChangeIconColorIdentityProof={setChangeIconColorIdentityProof}
        showUploadFileSuccess={showUploadFileSuccess}
        setShowUploadFileSuccess={setShowUploadFileSuccess}
        channel_reference={channel_reference}
        HKIDQRCodeData={HKIDQRCodeData}
        setHKIDVersion={setHKIDVersion}
        HKIDVersionValue={HKIDVersionValue}
        setShowContinueBtn={setShowContinueBtn}
        setDocumentData={setDocumentData}
        setZolozDocumentData={setZolozDocumentData}
        setSucsess={setSucsess}
        success={success}
        setChangeIconIncomeProof={setChangeIconIncomeProof}
        changeIconIncomeProof={changeIconIncomeProof}
      />
    );
    const fileInput = screen.getByLabelText("Upload");
    fireEvent.change(fileInput, {
      target: {
        files: [
          new File(["dummy content"], "test-image.png", { type: "image/png" }),
        ],
      },
    });
    await waitFor(() => expect(postDocuments).toHaveBeenCalled());
  });

  test("should handle click continue button and trigger OK action", () => {
    render(
      <DocumentUploadSRC2
        setShowIncomeProof={setShowIncomeProof}
        setDocumentCount={setDocumentCount}
        documentCount={documentCount}
        changeSuccessState={changeSuccessState}
        showQRCodePage={showQRCodePage}
        setShowQRCodePage={setShowQRCodePage}
        setChangeIconColorIdentityProof={setChangeIconColorIdentityProof}
        showUploadFileSuccess={showUploadFileSuccess}
        setShowUploadFileSuccess={setShowUploadFileSuccess}
        channel_reference={channel_reference}
        HKIDQRCodeData={HKIDQRCodeData}
        setHKIDVersion={setHKIDVersion}
        HKIDVersionValue={HKIDVersionValue}
        setShowContinueBtn={setShowContinueBtn}
        setDocumentData={setDocumentData}
        setZolozDocumentData={setZolozDocumentData}
        setSucsess={setSucsess}
        success={success}
        setChangeIconIncomeProof={setChangeIconIncomeProof}
        changeIconIncomeProof={changeIconIncomeProof}
      />
    );
    fireEvent.click(screen.getByTitle('Income Proof'));
    expect(setDocumentCount).not.toBeNaN();
  });

  test("should show modal when tips link is clicked", () => {
    render(
      <DocumentUploadSRC2
        setShowIncomeProof={setShowIncomeProof}
        setDocumentCount={setDocumentCount}
        documentCount={documentCount}
        changeSuccessState={changeSuccessState}
        showQRCodePage={showQRCodePage}
        setShowQRCodePage={setShowQRCodePage}
        setChangeIconColorIdentityProof={setChangeIconColorIdentityProof}
        showUploadFileSuccess={showUploadFileSuccess}
        setShowUploadFileSuccess={setShowUploadFileSuccess}
        channel_reference={channel_reference}
        HKIDQRCodeData={HKIDQRCodeData}
        setHKIDVersion={setHKIDVersion}
        HKIDVersionValue={HKIDVersionValue}
        setShowContinueBtn={setShowContinueBtn}
        setDocumentData={setDocumentData}
        setZolozDocumentData={setZolozDocumentData}
        setSucsess={setSucsess}
        success={success}
        setChangeIconIncomeProof={setChangeIconIncomeProof}
        changeIconIncomeProof={changeIconIncomeProof}
      />
    );
    fireEvent.click(screen.getByText("here"));
    expect(screen.getByText("© Standard Chartered Bank (HK) Limited")).toBeInTheDocument();
    
  });
  test("call closeFileUpload function onClick of close button", () => {
    const closeFileUploadMock = jest.fn();
    render(
      <DocumentUploadSRC2
        setShowIncomeProof={setShowIncomeProof}
        closeFileUpload={closeFileUploadMock}
        setShowQRCodePage={setShowQRCodePage}
        setHKIDVersion={setHKIDVersion}
        setShowContinueBtn={setShowContinueBtn}
      />
    );
    const backBtn = screen.getByTitle("back-btn-upload-doc1");
    fireEvent.click(backBtn);
     expect(backBtn).not.toBeDisabled();
  });

  test("call handleDelete function onClick of delete button", () => {
    (useSelector as jest.Mock).mockReturnValue([
      { id: 1, file: "", filename: "file1", documentStatus: "UPLOADED" },
      { id: 2, file: "", filename: "file2", documentStatus: "Upload failed" },
    ]);

    const mockCreateObjectURL = jest.fn(() => "mocked-url");
    global.URL.createObjectURL = mockCreateObjectURL;
    render(<DocumentUploadSRC2 showQRCodePage={false} />);
    const backBtn = screen.getByTestId("delete-btn");
    fireEvent.click(backBtn);
    expect(mockCreateObjectURL).toHaveBeenCalled();
  });

  test('Should call okBtnClick when Continue button is clicked and enabled and title="Colour Identity Proof"', () => {
    const mockOkBtnClick = jest.fn();
    render(
      <DocumentUploadSRC2
        showUploadFileSuccess={true}
        title="Income Proof"
        setShowIncomeProof={setShowIncomeProof}
        setShowContinueBtn={setShowContinueBtn}
        okBtnClick={mockOkBtnClick}
      />
    );
    const continueBtn = screen.getByTitle("Income Proof");
    fireEvent.click(continueBtn);
    expect(continueBtn).toBeInTheDocument();

  });
  test("call handleRefresh  function onClick of Refresh button", () => {
    (useSelector as jest.Mock).mockReturnValue([
      { id: 1, file: "", filename: "file1", documentStatus: "UPLOADED" },
      { id: 2, file: "", filename: "file2", documentStatus: "Upload failed" },
    ]);
    const mockCreateObjectURL = jest.fn(() => "mocked-url");
    global.URL.createObjectURL = mockCreateObjectURL;
    render(<DocumentUploadSRC2 showQRCodePage={false} />);
    const refreshBtn = screen.getByTestId("refresh-btn");
    fireEvent.click(refreshBtn);
    expect(refreshBtn).toBeInTheDocument();

  });
});







import { render, screen, fireEvent, waitFor } from "@testing-library/react";
import DocumentUploadSRC2 from "../document-upload-scr2/document-upload-scr2";
import { Provider } from "react-redux";
import configureStore from "redux-mock-store";
import { postDocuments, postZOLOCheck, postZolozAcknowledge } from "../../../../preApproval/services/preApprovalPostServices";
import { dispatchLoader } from "../../../../../services/common-service";

// Mock services and utilities
jest.mock("../../../../preApproval/services/preApprovalPostServices", () => ({
  postDocuments: jest.fn(),
  postZOLOCheck: jest.fn(),
  postZolozAcknowledge: jest.fn(),
}));
jest.mock("../../../../../services/common-service", () => ({
  dispatchLoader: jest.fn(),
}));

const mockStore = configureStore([]);
const mockDispatch = jest.fn();

describe("DocumentUploadSRC2 Component", () => {
  let store;

  const defaultProps = {
    setShowIncomeProof: jest.fn(),
    setDocumentCount: jest.fn(),
    documentCount: 0,
    changeSuccessState: jest.fn(),
    showQRCodePage: false,
    setShowQRCodePage: jest.fn(),
    setChangeIconColorIdentityProof: jest.fn(),
    showUploadFileSuccess: false,
    setShowUploadFileSuccess: jest.fn(),
    channel_reference: "test-channel",
    HKIDQRCodeData: { transactionId: "test-id", qrCode: "test-qrcode" },
    setHKIDVersion: jest.fn(),
    HKIDVersionValue: "test-version",
    setShowContinueBtn: jest.fn(),
    setDocumentData: jest.fn(),
    setZolozDocumentData: jest.fn(),
    setSucsess: jest.fn(),
    success: false,
    setChangeIconIncomeProof: jest.fn(),
    changeIconIncomeProof: false,
  };

  beforeEach(() => {
    store = mockStore({
      stages: { stages: [{ stageInfo: {} }] },
      preApproval: { incomeProofDocumentUpload: [] },
    });
    jest.clearAllMocks();
  });

  test("renders component correctly with default props", () => {
    render(
      <Provider store={store}>
        <DocumentUploadSRC2 {...defaultProps} />
      </Provider>
    );

    expect(screen.getByText("Income Proof")).toBeInTheDocument();
    expect(screen.getByText("© Standard Chartered Bank (HK) Limited")).toBeInTheDocument();
  });

  test("handles file upload correctly", async () => {
    (postDocuments as jest.Mock).mockResolvedValue({
      statusText: "Accepted",
      data: { success: true },
    });

    render(
      <Provider store={store}>
        <DocumentUploadSRC2 {...defaultProps} />
      </Provider>
    );

    const fileInput = screen.getByLabelText("Upload");
    fireEvent.change(fileInput, {
      target: {
        files: [new File(["dummy content"], "test-file.png", { type: "image/png" })],
      },
    });

    await waitFor(() => expect(postDocuments).toHaveBeenCalledTimes(1));
    expect(dispatchLoader).toHaveBeenCalledWith(true);
  });

  test("opens tips modal on click", () => {
    render(
      <Provider store={store}>
        <DocumentUploadSRC2 {...defaultProps} />
      </Provider>
    );

    fireEvent.click(screen.getByText("here"));
    expect(defaultProps.setShowIncomeProof).toHaveBeenCalledTimes(0); // Update assertions for modal actions
  });

  test("disables continue button if no files are uploaded", () => {
    render(
      <Provider store={store}>
        <DocumentUploadSRC2 {...defaultProps} />
      </Provider>
    );

    const continueButton = screen.getByRole("button", { name: "Continue" });
    expect(continueButton).toBeDisabled();
  });

  test("enables continue button after successful file upload", async () => {
    (postDocuments as jest.Mock).mockResolvedValue({
      statusText: "Accepted",
      data: { success: true },
    });

    render(
      <Provider store={store}>
        <DocumentUploadSRC2 {...defaultProps} />
      </Provider>
    );

    const fileInput = screen.getByLabelText("Upload");
    fireEvent.change(fileInput, {
      target: {
        files: [new File(["dummy content"], "test-file.png", { type: "image/png" })],
      },
    });

    await waitFor(() => expect(postDocuments).toHaveBeenCalledTimes(1));
    const continueButton = screen.getByRole("button", { name: "Continue" });
    expect(continueButton).not.toBeDisabled();
  });

  test("calls delete document action when delete button is clicked", () => {
    render(
      <Provider store={store}>
        <DocumentUploadSRC2 {...defaultProps} />
      </Provider>
    );

    const deleteButton = screen.getByTestId("delete-btn");
    fireEvent.click(deleteButton);
    expect(mockDispatch).toHaveBeenCalledWith(expect.any(Function)); // Replace with the exact dispatched action
  });

  test("calls refresh action when refresh button is clicked", () => {
    render(
      <Provider store={store}>
        <DocumentUploadSRC2 {...defaultProps} />
      </Provider>
    );

    const refreshButton = screen.getByTestId("refresh-btn");
    fireEvent.click(refreshButton);
    expect(mockDispatch).toHaveBeenCalledWith(expect.any(Function)); // Replace with the exact dispatched action
  });

  test("handles submit action on QR Code page", async () => {
    (postZOLOCheck as jest.Mock).mockResolvedValue({
      data: { documents: [{ docId: "test-doc" }] },
    });
    (postZolozAcknowledge as jest.Mock).mockResolvedValue({
      data: [{ responseStatus: "Success" }],
    });

    render(
      <Provider store={store}>
        <DocumentUploadSRC2 {...defaultProps} showQRCodePage={true} />
      </Provider>
    );

    const submitButton = screen.getByText("Submit");
    fireEvent.click(submitButton);

    await waitFor(() => expect(postZOLOCheck).toHaveBeenCalledTimes(1));
    await waitFor(() => expect(postZolozAcknowledge).toHaveBeenCalledTimes(1));
  });

  test("handles modal close actions correctly", () => {
    render(
      <Provider store={store}>
        <DocumentUploadSRC2 {...defaultProps} />
      </Provider>
    );

    const closeButton = screen.getByText("CLOSE");
    fireEvent.click(closeButton);

    expect(defaultProps.setShowIncomeProof).toHaveBeenCalledWith("");
    expect(defaultProps.setShowQRCodePage).toHaveBeenCalledWith(false);
  });
});
