import React from 'react';
import { render, fireEvent, screen, waitFor } from '@testing-library/react';
import DocumentUploadSRC2 from './DocumentUploadSRC2';
import { useDispatch, useSelector } from 'react-redux';
import { preApprovalAction } from '../../../../preApproval/store/preApproval-slice';
import { postDocuments, postZOLOCheck, postZolozAcknowledge } from '../../../../preApproval/services/preApprovalPostServices';
import { dispatchLoader } from '../../../../../services/common-service';

// Mocking Redux hooks and services
jest.mock('react-redux', () => ({
  useDispatch: jest.fn(),
  useSelector: jest.fn(),
}));

jest.mock('../../../../preApproval/services/preApprovalPostServices', () => ({
  postDocuments: jest.fn(),
  postZOLOCheck: jest.fn(),
  postZolozAcknowledge: jest.fn(),
}));

jest.mock('../../../../../services/common-service', () => ({
  dispatchLoader: jest.fn(),
}));

describe('DocumentUploadSRC2', () => {
  const mockDispatch = jest.fn();
  const setShowIncomeProof = jest.fn();
  const setDocumentCount = jest.fn();
  const documentCount = 0;
  const changeSuccessState = jest.fn();
  const showQRCodePage = false;
  const setShowQRCodePage = jest.fn();
  const setChangeIconColorIdentityProof = jest.fn();
  const showUploadFileSuccess = false;
  const setShowUploadFileSuccess = jest.fn();
  const channel_reference = 'test-channel';
  const HKIDQRCodeData = { transactionId: 'test-id', qrCode: 'test-qrcode' };
  const setHKIDVersion = jest.fn();
  const HKIDVersionValue = 'test-version';
  const setShowContinueBtn = jest.fn();
  const setDocumentData = jest.fn();
  const setZolozDocumentData = jest.fn();
  const setSucsess = jest.fn();
  const success = false;
  const setChangeIconIncomeProof = jest.fn();
  const changeIconIncomeProof = false;

  beforeEach(() => {
    useDispatch.mockReturnValue(mockDispatch);
    useSelector.mockImplementation((callback) =>
      callback({
        stages: { stages: [{ stageInfo: {} }] },
        preApproval: { incomeProofDocumentUpload: [] },
      })
    );
    postDocuments.mockResolvedValue({ statusText: 'Accepted', data: {} });
    postZOLOCheck.mockResolvedValue({ data: { documents: [{ docId: 'test-doc' }] } });
    postZolozAcknowledge.mockResolvedValue({ data: [{ responseStatus: 'Success' }] });
    dispatchLoader.mockReturnValue(null);
  });

  test('should render the component correctly', () => {
    render(
      <DocumentUploadSRC2
        setShowIncomeProof={setShowIncomeProof}
        setDocumentCount={setDocumentCount}
        documentCount={documentCount}
        changeSuccessState={changeSuccessState}
        showQRCodePage={showQRCodePage}
        setShowQRCodePage={setShowQRCodePage}
        setChangeIconColorIdentityProof={setChangeIconColorIdentityProof}
        showUploadFileSuccess={showUploadFileSuccess}
        setShowUploadFileSuccess={setShowUploadFileSuccess}
        channel_reference={channel_reference}
        HKIDQRCodeData={HKIDQRCodeData}
        setHKIDVersion={setHKIDVersion}
        HKIDVersionValue={HKIDVersionValue}
        setShowContinueBtn={setShowContinueBtn}
        setDocumentData={setDocumentData}
        setZolozDocumentData={setZolozDocumentData}
        setSucsess={setSucsess}
        success={success}
        setChangeIconIncomeProof={setChangeIconIncomeProof}
        changeIconIncomeProof={changeIconIncomeProof}
      />
    );
    expect(screen.getByText('Income Proof')).toBeInTheDocument();
  });

  test('should display success modal when success is true', async () => {
    render(
      <DocumentUploadSRC2
        setShowIncomeProof={setShowIncomeProof}
        setDocumentCount={setDocumentCount}
        documentCount={documentCount}
        changeSuccessState={changeSuccessState}
        showQRCodePage={showQRCodePage}
        setShowQRCodePage={setShowQRCodePage}
        setChangeIconColorIdentityProof={setChangeIconColorIdentityProof}
        showUploadFileSuccess={showUploadFileSuccess}
        setShowUploadFileSuccess={setShowUploadFileSuccess}
        channel_reference={channel_reference}
        HKIDQRCodeData={HKIDQRCodeData}
        setHKIDVersion={setHKIDVersion}
        HKIDVersionValue={HKIDVersionValue}
        setShowContinueBtn={setShowContinueBtn}
        setDocumentData={setDocumentData}
        setZolozDocumentData={setZolozDocumentData}
        setSucsess={setSucsess}
        success={true}
        setChangeIconIncomeProof={setChangeIconIncomeProof}
        changeIconIncomeProof={changeIconIncomeProof}
      />
    );
    fireEvent.click(screen.getByText('Submit'));
    await waitFor(() => expect(postZOLOCheck).toHaveBeenCalled());
    expect(screen.getByText('Success')).toBeInTheDocument();
  });

  test('should handle file upload correctly', async () => {
    render(
      <DocumentUploadSRC2
        setShowIncomeProof={setShowIncomeProof}
        setDocumentCount={setDocumentCount}
        documentCount={documentCount}
        changeSuccessState={changeSuccessState}
        showQRCodePage={showQRCodePage}
        setShowQRCodePage={setShowQRCodePage}
        setChangeIconColorIdentityProof={setChangeIconColorIdentityProof}
        showUploadFileSuccess={showUploadFileSuccess}
        setShowUploadFileSuccess={setShowUploadFileSuccess}
        channel_reference={channel_reference}
        HKIDQRCodeData={HKIDQRCodeData}
        setHKIDVersion={setHKIDVersion}
        HKIDVersionValue={HKIDVersionValue}
        setShowContinueBtn={setShowContinueBtn}
        setDocumentData={setDocumentData}
        setZolozDocumentData={setZolozDocumentData}
        setSucsess={setSucsess}
        success={success}
        setChangeIconIncomeProof={setChangeIconIncomeProof}
        changeIconIncomeProof={changeIconIncomeProof}
      />
    );
    const fileInput = screen.getByLabelText('Upload');
    fireEvent.change(fileInput, {
      target: { files: [new File(['dummy content'], 'test-image.png', { type: 'image/png' })] },
    });
    await waitFor(() => expect(postDocuments).toHaveBeenCalled());
  });

  test('should handle click continue button and trigger OK action', () => {
    render(
      <DocumentUploadSRC2
        setShowIncomeProof={setShowIncomeProof}
        setDocumentCount={setDocumentCount}
        documentCount={documentCount}
        changeSuccessState={changeSuccessState}
        showQRCodePage={showQRCodePage}
        setShowQRCodePage={setShowQRCodePage}
        setChangeIconColorIdentityProof={setChangeIconColorIdentityProof}
        showUploadFileSuccess={showUploadFileSuccess}
        setShowUploadFileSuccess={setShowUploadFileSuccess}
        channel_reference={channel_reference}
        HKIDQRCodeData={HKIDQRCodeData}
        setHKIDVersion={setHKIDVersion}
        HKIDVersionValue={HKIDVersionValue}
        setShowContinueBtn={setShowContinueBtn}
        setDocumentData={setDocumentData}
        setZolozDocumentData={setZolozDocumentData}
        setSucsess={setSucsess}
        success={success}
        setChangeIconIncomeProof={setChangeIconIncomeProof}
        changeIconIncomeProof={changeIconIncomeProof}
      />
    );
    fireEvent.click(screen.getByRole('button', { name: /continue/i }));
    expect(setDocumentCount).toHaveBeenCalledWith(1);
  });

  test('should show modal when tips link is clicked', () => {
    render(
      <DocumentUploadSRC2
        setShowIncomeProof={setShowIncomeProof}
        setDocumentCount={setDocumentCount}
        documentCount={documentCount}
        changeSuccessState={changeSuccessState}
        showQRCodePage={showQRCodePage}
        setShowQRCodePage={setShowQRCodePage}
        setChangeIconColorIdentityProof={setChangeIconColorIdentityProof}
        showUploadFileSuccess={showUploadFileSuccess}
        setShowUploadFileSuccess={setShowUploadFileSuccess}
        channel_reference={channel_reference}
        HKIDQRCodeData={HKIDQRCodeData}
        setHKIDVersion={setHKIDVersion}
        HKIDVersionValue={HKIDVersionValue}
        setShowContinueBtn={setShowContinueBtn}
        setDocumentData={setDocumentData}
        setZolozDocumentData={setZolozDocumentData}
        setSucsess={setSucsess}
        success={success}
        setChangeIconIncomeProof={setChangeIconIncomeProof}
        changeIconIncomeProof={changeIconIncomeProof}
      />
    );
    fireEvent.click(screen.getByText('here'));
    expect(screen.getByText('Tips for uploading')).toBeInTheDocument();
  });
});





import React from "react";
import { render, screen, fireEvent, waitFor } from "@testing-library/react";
import { Provider } from "react-redux";
import configureStore from "redux-mock-store";
import thunk from "redux-thunk";
import DocumentUploadSRC2 from "./document-upload-scr2";

// Mock services
import {
  postZOLOCheck,
  postZolozAcknowledge,
  postPdfPreview,
} from "../../../../preApproval/services/preApprovalPostServices";
import { getImagePreview } from "../../../../preApproval/services/preApprovalServices";
import { preApprovalAction } from "../../../../preApproval/store/preApproval-slice";

// Mock implementations for the services
jest.mock("../../../../preApproval/services/preApprovalPostServices", () => ({
  postZOLOCheck: jest.fn(),
  postZolozAcknowledge: jest.fn(),
  postPdfPreview: jest.fn(),
}));

jest.mock("../../../../preApproval/services/preApprovalServices", () => ({
  getImagePreview: jest.fn(),
}));

// Mock for preApprovalAction
jest.mock("../../../../preApproval/store/preApproval-slice", () => ({
  preApprovalAction: {
    setDocumentZoloCheckRes: jest.fn(),
    setImgPrevURL: jest.fn(),
  },
}));

// Mock store configuration
const middlewares = [thunk];
const mockStore = configureStore(middlewares);

describe("callSubmit function", () => {
  let store: any;
  const defaultProps = {
    setShowIncomeProof: jest.fn(),
    setDocumentCount: jest.fn(),
    documentCount: 0,
    changeSuccessState: jest.fn(),
    showQRCodePage: true,
    setShowQRCodePage: jest.fn(),
    setChangeIconColorIdentityProof: jest.fn(),
    showUploadFileSuccess: false,
    setShowUploadFileSuccess: jest.fn(),
    channel_reference: "test_channel_ref",
    HKIDQRCodeData: { transactionId: "test_transaction_id", qrCode: "test_qr_code" },
    setHKIDVersion: jest.fn(),
    HKIDVersionValue: "Identity Proof",
    setShowContinueBtn: jest.fn(),
    setDocumentData: jest.fn(),
    setZolozDocumentData: jest.fn(),
    setSucsess: jest.fn(),
    success: false,
    setChangeIconIncomeProof: jest.fn(),
    changeIconIncomeProof: false,
  };

  beforeEach(() => {
    store = mockStore({
      preApproval: {
        imgPrevURL: "",
      },
      stages: {
        stages: [
          {
            stageInfo: {
              applicant_documents: [
                {
                  document_list: [
                    {
                      document_options: [
                        {
                          document_types: [
                            {
                              document_type_code: "DOC_TYPE_1",
                            },
                          ],
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          },
        ],
      },
    });
  });

  it("should handle the successful callSubmit flow", async () => {
    // Mock API responses
    const zoloCheckResponse = {
      data: {
        documents: [
          {
            docId: "test_doc_id",
            document_type_code: "DOC_TYPE_1",
          },
        ],
      },
    };

    const acknowledgeResponse = {
      data: [{ responseStatus: "Success" }],
    };

    const imagePreviewBlob = new Blob(["test image"], { type: "image/png" });
    const imagePreviewResponse = {
      data: imagePreviewBlob,
      status: 200,
    };

    const pdfPreviewResponse = {
      status: 200,
      data: { statusCode: "OK", documents: [{ name: "test.pdf" }] },
    };

    // Set up mock implementations
    (postZOLOCheck as jest.Mock).mockResolvedValue(zoloCheckResponse);
    (postZolozAcknowledge as jest.Mock).mockResolvedValue(acknowledgeResponse);
    (getImagePreview as jest.Mock).mockResolvedValue(imagePreviewResponse);
    (postPdfPreview as jest.Mock).mockResolvedValue(pdfPreviewResponse);

    // Render the component
    render(
      <Provider store={store}>
        <DocumentUploadSRC2 {...defaultProps} />
      </Provider>
    );

    // Simulate clicking the submit button
    const submitButton = screen.getByRole("button", { title: "submit-button" });
    fireEvent.click(submitButton);

    // Wait for async operations to complete
    await waitFor(() => {
      expect(postZOLOCheck).toHaveBeenCalledWith(
        defaultProps.channel_reference,
        defaultProps.HKIDQRCodeData.transactionId,
        defaultProps.HKIDVersionValue
      );

      expect(postZolozAcknowledge).toHaveBeenCalledWith(
        defaultProps.channel_reference,
        zoloCheckResponse.data.documents
      );

      expect(getImagePreview).toHaveBeenCalledWith(
        defaultProps.channel_reference,
        "test_doc_id"
      );

      expect(postPdfPreview).toHaveBeenCalledWith(defaultProps.channel_reference);

      // Check if the image URL is dispatched
      expect(preApprovalAction.setImgPrevURL).toHaveBeenCalled();

      // Ensure the success modal is shown
      expect(defaultProps.setShowUploadFileSuccess).toHaveBeenCalledWith(true);
    });
  });

  it("should handle errors in callSubmit function", async () => {
    // Mock API to throw an error
    (postZOLOCheck as jest.Mock).mockRejectedValue(new Error("Network Error"));

    // Render the component
    render(
      <Provider store={store}>
        <DocumentUploadSRC2 {...defaultProps} />
      </Provider>
    );

    // Simulate clicking the submit button
    const submitButton = screen.getByRole("button", { title: "submit-button" });
    fireEvent.click(submitButton);

    // Wait for the error handling to complete
    await waitFor(() => {
      expect(postZOLOCheck).toHaveBeenCalled();
      // Ensure console.error is called or the error is logged
    });
  });
});
