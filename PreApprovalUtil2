import { useDispatch, useSelector } from "react-redux";
import PreApprovalUtil from "./PreApprovalUtil";
import { v4 as uuid } from "uuid";
import md5 from "md5";
import { sha256 } from "js-sha256";

jest.mock("react-redux", () => ({
  useSelector: jest.fn(),
  useDispatch: jest.fn(),
}));

jest.mock("uuid", () => ({
  v4: jest.fn(() => "mock-uuid"),
}));

jest.mock("md5", () => jest.fn(() => "mock-md5-hash"));
jest.mock("js-sha256", () => ({
  sha256: jest.fn(() => "mock-sha256-hash"),
}));

describe("PreApprovalUtil", () => {
  let mockDispatch: jest.Mock;

  beforeEach(() => {
    mockDispatch = jest.fn();
    (useDispatch as jest.Mock).mockReturnValue(mockDispatch);

    (useSelector as jest.Mock).mockImplementation((selector) => {
      // Return different mocked state based on what is being selected
      const state = {
        stages: {
          stages: [
            {
              stageInfo: {
                applicants: [{}],
                fieldMetaData: { data: { stages: [{ fields: [] }] } },
                application: {},
                products: [{}],
              },
              stageId: "AD_1",
            },
          ],
          userInput: { applicants: [{}] },
        },
        auth: { sessionUid: "mock-session-uid" },
        lovDesc: { lovDesc: [{ code_desc: "desc1", label: "key1" }] },
      };
      return selector(state);
    });
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  describe("generateUUID", () => {
    it("should generate a mock UUID", () => {
      const result = PreApprovalUtil.generateUUID();
      expect(result).toBe("mock-uuid");
    });
  });

  describe("getSHA256Hash", () => {
    it("should return the SHA-256 hash of an input string", async () => {
      const mockDigest = jest.fn().mockResolvedValue(
        new Uint8Array([216, 199, 45, 173, 82, 36, 19, 110, 41, 120, 141, 92])
      );

      Object.defineProperty(window.crypto.subtle, "digest", {
        value: mockDigest,
      });

      const result = await PreApprovalUtil.getSHA256Hash("test-input");
      expect(mockDigest).toHaveBeenCalledWith(
        "SHA-256",
        new TextEncoder().encode("test-input")
      );
      expect(result).toBe("d8c72dad5224136e29788d5c80242f79");
    });
  });

  describe("stringToHash", () => {
    it("should hash a string into a number", () => {
      const result = PreApprovalUtil.stringToHash("test");
      expect(result).toBeGreaterThan(0); // Example validation
    });
  });

  describe("getFieldOnlyWithValue", () => {
    it("should return an array of fields with values", () => {
      const result = PreApprovalUtil.getFieldOnlyWithValue();
      expect(result).toEqual(["product_minimum"]);
    });
  });

  describe("getApplicantFields", () => {
    it("should return the list of applicant fields", () => {
      const result = PreApprovalUtil.getApplicantFields();
      expect(result).toContain("last_name_a_1");
      expect(result.length).toBeGreaterThan(0);
    });
  });

  describe("getLovDescriptionFields", () => {
    it("should return an array of keys from lovDesc", () => {
      const result = PreApprovalUtil.getLovDescriptionFields();
      expect(result).toEqual(["key1"]);
    });
  });

  describe("getAckMetaData", () => {
    it("should return formatted metadata", () => {
      process.env.REACT_APP_XRTOB = "mock-key";

      const result = PreApprovalUtil.getAckMetaData("mock-channel-reference");
      expect(JSON.parse(result)).toMatchObject({
        reqId: "mock-uuid",
        iAuth: "mock-md5-hash",
      });
    });
  });

  describe("getFormConfigPayload", () => {
    it("should return a sorted payload object", () => {
      const result = PreApprovalUtil.getFormConfigPayload();
      expect(result).toBeDefined();
      expect(typeof result).toBe("object");
    });
  });

  describe("securityCallDesider", () => {
    it("should generate a security descriptor", () => {
      const result = PreApprovalUtil.securityCallDesider("bAuth", "keyType", []);
      expect(result).toBeDefined();
    });
  });

  describe("getBAuth", () => {
    it("should generate a BAuth hash", async () => {
      const result = await PreApprovalUtil.getBAuth();
      expect(result).toBeDefined();
      expect(result).toBe("mock-sha256-hash");
    });
  });

  jest.mock('path-to-store', () => ({
  getState: jest.fn(),
}));

jest.mock('./preApprovalUtils', () => ({
  getApplicantFields: jest.fn(),
  getApplicationFields: jest.fn(),
  getProductFields: jest.fn(),
  getLoveDescriptionFields: jest.fn(),
  generateSecMd: jest.fn(),
}));
import store from 'path-to-store';
import * as PreApprovalUtil from './preApprovalUtils';
import { securityCallDesider } from './path-to-securityCallDesider';

describe('securityCallDesider', () => {
  beforeEach(() => {
    jest.clearAllMocks(); // Clear mocks before each test
  });

  it('should handle bAuth case', () => {
    store.getState.mockReturnValue({
      stages: { stages: [{ stageInfo: JSON.stringify({ applicants: ['app1', 'app2'] }) }] },
    });
    PreApprovalUtil.getApplicantFields.mockReturnValue(['field1', 'field2']);
    PreApprovalUtil.generateSecMd.mockReturnValue('mockSecMd');

    const result = securityCallDesider('bAuth', 'keyType', 'checkFieldWithValue');

    expect(store.getState).toHaveBeenCalled();
    expect(PreApprovalUtil.getApplicantFields).toHaveBeenCalled();
    expect(PreApprovalUtil.generateSecMd).toHaveBeenCalledWith(
      'bAuth',
      'keyType',
      ['field1', 'field2'],
      ['app1', 'app2'],
      'checkFieldWithValue'
    );
    expect(result).toBe('mockSecMd');
  });

  it('should handle aAuth case', () => {
    store.getState.mockReturnValue({
      stages: { stages: [{ stageInfo: JSON.stringify({ application: ['appData'] }) }] },
    });
    PreApprovalUtil.getApplicationFields.mockReturnValue(['field1', 'field2']);
    PreApprovalUtil.generateSecMd.mockReturnValue('mockSecMd');

    const result = securityCallDesider('aAuth', 'keyType', 'checkFieldWithValue');

    expect(store.getState).toHaveBeenCalled();
    expect(PreApprovalUtil.getApplicationFields).toHaveBeenCalled();
    expect(PreApprovalUtil.generateSecMd).toHaveBeenCalledWith(
      'aAuth',
      'keyType',
      ['field1', 'field2'],
      ['appData'],
      'checkFieldWithValue'
    );
    expect(result).toBe('mockSecMd');
  });

  it('should handle pAuth case', () => {
    store.getState.mockReturnValue({
      stages: { stages: [{ stageInfo: JSON.stringify({ products: [['prod1']] }) }] },
    });
    PreApprovalUtil.getProductFields.mockReturnValue(['field1', 'field2']);
    PreApprovalUtil.generateSecMd.mockReturnValue('mockSecMd');

    const result = securityCallDesider('pAuth', 'keyType', 'checkFieldWithValue');

    expect(store.getState).toHaveBeenCalled();
    expect(PreApprovalUtil.getProductFields).toHaveBeenCalled();
    expect(PreApprovalUtil.generateSecMd).toHaveBeenCalledWith(
      'pAuth',
      'keyType',
      ['field1', 'field2'],
      ['prod1'],
      'checkFieldWithValue'
    );
    expect(result).toBe('mockSecMd');
  });

  it('should handle lAuth case', () => {
    store.getState.mockReturnValue({
      stages: { stages: [{ stageInfo: JSON.stringify({ lov_desc: 'lovDesc' }) }] },
    });
    PreApprovalUtil.getLoveDescriptionFields.mockReturnValue(['field1', 'field2']);
    PreApprovalUtil.generateSecMd.mockReturnValue('mockSecMd');

    const result = securityCallDesider('lAuth', 'keyType', 'checkFieldWithValue');

    expect(store.getState).toHaveBeenCalled();
    expect(PreApprovalUtil.getLoveDescriptionFields).toHaveBeenCalled();
    expect(PreApprovalUtil.generateSecMd).toHaveBeenCalledWith(
      'lAuth',
      'keyType',
      ['field1', 'field2'],
      'lovDesc',
      'checkFieldWithValue'
    );
    expect(result).toBe('mockSecMd');
  });

  it('should handle unknown authType gracefully', () => {
    store.getState.mockReturnValue({
      stages: { stages: [{ stageInfo: JSON.stringify({ applicants: ['applicant'] }) }] },
    });

    const result = securityCallDesider('unknownAuth', 'keyType', 'checkFieldWithValue');

    expect(store.getState).toHaveBeenCalled();
    expect(result).toBeUndefined();
  });

  it('should handle missing stageInfo gracefully', () => {
    store.getState.mockReturnValue({
      stages: { stages: [{}] }, // No stageInfo provided
    });

    const result = securityCallDesider('bAuth', 'keyType', 'checkFieldWithValue');

    expect(store.getState).toHaveBeenCalled();
    expect(result).toBeUndefined();
  });
});
