import { PreApprovalUtil } from './preApprovalUtils'; // Adjust the import path
import { store } from '../../../utils/store/store'; // Adjust the import path

jest.mock('../../../utils/store/store', () => ({
  store: {
    getState: jest.fn(),
  },
}));

describe('PreApprovalUtil - getADFormConfigPayload', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('should return a valid payload with all fields', () => {
    // Mock Redux state
    const mockState = {
      stages: {
        stages: [
          {
            stageId: 'AD_1',
            stageInfo: {
              applicants: [{ last_name_a_1: 'Doe', first_name_a_1: 'John' }],
              application: { channel_reference: '12345' },
              products: [{ product_category: 'Loan' }],
              stage: { stage_status: 'incomplete' },
            },
          },
        ],
      },
      lovDesc: {
        lovDesc: [{ label: 'res_city', code_desc: 'Hong Kong' }],
      },
    };

    (store.getState as jest.Mock).mockReturnValue(mockState);

    // Call the function
    const result = PreApprovalUtil.getADFormConfigPayload();

    // Expectations
    expect(result).toBeDefined();
    expect(result.applicants).toBeDefined();
    expect(result.applicants.last_name_a_1).toBe('Doe');
    expect(result.applicants.first_name_a_1).toBe('John');
    expect(result.applicants.res_city_desc_a_1).toBe('Hong Kong');
    expect(result.applicants.product_categories).toBe('Loan');
    expect(result.stage.stage_status).toBe('incomplete');
    expect(result.stage.page_id).toBeDefined(); // Ensure page_id is set
  });

  it('should handle missing stageInfo gracefully', () => {
    // Mock Redux state with missing stageInfo
    const mockState = {
      stages: {
        stages: [
          {
            stageId: 'AD_1',
            stageInfo: undefined, // Missing stageInfo
          },
        ],
      },
      lovDesc: {
        lovDesc: [],
      },
    };

    (store.getState as jest.Mock).mockReturnValue(mockState);

    // Call the function
    const result = PreApprovalUtil.getADFormConfigPayload();

    // Expectations
    expect(result).toBeDefined();
    expect(result.applicants).toBeUndefined();
    expect(result.stage).toBeDefined();
    expect(result.stage.stage_status).toBe('incomplete');
  });

  it('should handle missing stages gracefully', () => {
    // Mock Redux state with missing stages
    const mockState = {
      stages: {
        stages: [], // No stages
      },
      lovDesc: {
        lovDesc: [],
      },
    };

    (store.getState as jest.Mock).mockReturnValue(mockState);

    // Call the function
    const result = PreApprovalUtil.getADFormConfigPayload();

    // Expectations
    expect(result).toBeDefined();
    expect(result.applicants).toBeUndefined();
    expect(result.stage).toBeDefined();
    expect(result.stage.stage_status).toBe('incomplete');
  });

  it('should handle missing lovDesc gracefully', () => {
    // Mock Redux state with missing lovDesc
    const mockState = {
      stages: {
        stages: [
          {
            stageId: 'AD_1',
            stageInfo: {
              applicants: [{ last_name_a_1: 'Doe', first_name_a_1: 'John' }],
              application: { channel_reference: '12345' },
              products: [{ product_category: 'Loan' }],
              stage: { stage_status: 'incomplete' },
            },
          },
        ],
      },
      lovDesc: undefined, // Missing lovDesc
    };

    (store.getState as jest.Mock).mockReturnValue(mockState);

    // Call the function
    const result = PreApprovalUtil.getADFormConfigPayload();

    // Expectations
    expect(result).toBeDefined();
    expect(result.applicants).toBeDefined();
    expect(result.applicants.last_name_a_1).toBe('Doe');
    expect(result.applicants.first_name_a_1).toBe('John');
    expect(result.applicants.product_categories).toBe('Loan');
    expect(result.applicants.res_city_desc_a_1).toBeUndefined();
    expect(result.stage.stage_status).toBe('incomplete');
  });
});
