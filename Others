 const callSubmit = async () => {   
        // try {
          // setShowSpinner(true);
          // setOpenSuccessModal(true);
          // setShowUploadFileSuccess(true);
          // dispatch(dispatchLoader(true));
         
          var transactionId = HKIDQRCodeData.transactionId;
          var docType = HKIDVersionValue;
          // var document_type_code =
          //   stageSelector.applicant_documents[0]?.document_list[0]
          //     ?.document_options[0]?.document_types[0]?.document_type_code;
          var document_type_code =  "A001" ;

            // debugger
          const zoloCheckResponse = await postZOLOCheck(
            channel_reference,
            transactionId,
            docType
          );

          console.log("zoloCheckResponse :", zoloCheckResponse);
          if (zoloCheckResponse.data?.documents?.length > 0) {
            dispatch(dispatchLoader(true));
            // vm.checkResultSuccess = true;
            // vm.checkResultPreview(response);
            // setSuccsessFlag(response);
            // triggerAckCall(response.data.documents);
          console.log("res:", res.documents);
          const documents =  zoloCheckResponse?.data?.documents || [];
          const docId = documents[0]?.docId;
          setZolozDocumentData(documents[0]);
          // dispatch(stagesAction.updatezolozDocumentData(documents[0]));
          const docFilter = documents.filter(
            (item: any) => item.document_type_code === document_type_code
          );
    
          //Update state with ZOLO check response
          dispatch(preApprovalAction.setDocumentZoloCheckRes(zoloCheckResponse));
          // dispatch(preApprovalAction.setDocumentZoloCheckRes(res));
    
          //Achnowledge the post
          const acknowledgeResponse = await postZolozAcknowledge(
            channel_reference,
            documents
          );

            console.log("acknowledgeResponse:",acknowledgeResponse);
          const resStatus = acknowledgeResponse?.data?.[0]?.responseStatus;
          /* istanbul ignore else */
          if (resStatus === "Success") {
            dispatch(dispatchLoader(false));
            setOpenSuccessModal(true);
            setShowUploadFileSuccess(true);
    
            //Fetch and handle image preview
            const imagePreviewResponse = await getImagePreview(
              channel_reference,
              docId
            );
            console.log("imagePreviewResponse:",imagePreviewResponse);
            const blob = imagePreviewResponse?.data;
            const imgObjURL = URL.createObjectURL(blob);
    
            dispatch(preApprovalAction.setImgPrevURL(imgObjURL));
             /* istanbul ignore else */
            if (imagePreviewResponse.status === 200) {
              //PDF Preview
              const pdfPreviewRes = await postPdfPreview(channel_reference);
              if (pdfPreviewRes.status >= 200 && pdfPreviewRes.status < 300) {
                 /* istanbul ignore else */
                if (pdfPreviewRes.data.statusCode.toUpperCase() === "OK") {
                  setDocumentData(pdfPreviewRes.data.documents);
                  // dispatch(stagesAction.updatedocumentData(pdfPreviewRes.data.documents));
                  //   setShowSpinner(false);
                  dispatch(dispatchLoader(false));
                }
              } else {
                dispatch(dispatchLoader(false));
              }
            }
          }
        }
        else { 
          dispatch(dispatchLoader(false));
          setZoloErrorpopup(true);
        }
          
        // } catch (error) {
        //   console.log("error:", error);
          
        // }
      };
