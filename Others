import React, { useEffect, useState } from "react";
import { useSelector, useDispatch } from "react-redux";
import {
  dispatchError,
  dispatchLoader,
} from "../../../../../services/common-service";
import { StoreModel } from "../../../../../utils/model/common-model";
import {
  postDocuments,
  postZOLOCheck,
  postZolozAcknowledge,
  postPdfPreview,
  postQRCodeZOLO,
} from "../../../services/preApprovalPostServices";
import { preApprovalAction } from "../../../store/preApproval-slice";
import Carousel from "../carousel/carousel";
import banner1 from "../images-du/illustration-03@3x.png";
import banner2 from "../images-du/illustration-06@3x.png";
import banner3 from "../images-du/illustration-05@3x.png";
import banner4 from "../images-du/illustration-02@3x.png";
import banner5 from "../images-du/illustration-01@3x.png";
import banner6 from "../images-du/illustration-04@3x.png";
import { getImagePreview } from "../../../../preApproval/services/preApprovalServices";
import { stagesAction } from "../../../../../utils/store/stages-slice";
import PopupModel from "../../../../../shared/components/popup-model/popup-model";
import AlertModel from "../../../alertModal/alert-modal";
import { AxiosError } from "axios";
import imgUrlStatic from "../../../../preApproval/images/front-side.png";
import ImagePreviewModal from "../modals/imagePreviewModal/image-preview-modal";
import { CONSTANTS } from "../../../../../utils/common/constants";
import { documentList } from "../../../../preApproval/services/payload";

const QRScreen: React.FC<any> = ({
  setHKIDVersion,
  setShowContinueBtn,
  // setShowIncomeProof
}) => {
  const dispatch = useDispatch();
  const [imagePreview, setImagePreview] = useState(false);
  const [imgeURL, setImageURL] = useState("");
  const [name, setName] = useState("");
  const [openSuccessModal, setOpenSuccessModal] = useState(false);
  const [continueBtnVisiblity, setContinueBtnVisiblity] = useState(false);
  const channel_reference = "04041ed2f9a3a12024";
  const [zoloErrorpopup, setZoloErrorpopup] = useState(false);

  const showUploadFileSuccess = useSelector(
    (state: any) => state.stages.dynamicDocumentsUpload.showUploadFileSuccess
  );
  const HKIDQRCodeData = useSelector(
    (state: any) => state.stages.dynamicDocumentsUpload.HKIDQRCodeData
  );
  const HKIDVersionValue = useSelector(
    (state: any) => state.stages.dynamicDocumentsUpload.HKIDVersionValue
  );
  // const channel_reference = useSelector((state: StoreModel) => state.stages && state.stages.stages[0].stageInfo.application.channel_reference);
  const fileSectionData = useSelector(
    (state: any) => state.stages.dynamicDocumentsUpload.fileSectionData
  );
  const documentCount = useSelector(
    (state: any) => state.stages.dynamicDocumentsUpload.documentCount
  );
  const showIncomeProof = useSelector(
    (state: any) => state.stages.dynamicDocumentsUpload.showIncomeProof
  );

  const res = {
    errorCode: null,
    errorDesc: null,
    zoloz_ekyc_result: "R",
    zoloz_perm_residence: "Y",
    documents: [
      {
        docId:
          "c45f49dcf7092bc3420a6fedcb874dacce1335621e5e9d70ba201028542705d3",
        country: "HK",
        documentStatus: "UPLOADED",
        appId: "04271788909e312024",
        documentCategoryCode: "R0001",
        errorDescription: null,
        errorCode: null,
        responseStatus: "SUCCESS",
        documentTypeCode: "A001",
        documentOptionSequence: "1",
        imageOrder: "1",
        applicantId: "1",
        period: 0,
        documentName: "HKID_Front_Page1732689656595",
      },
      {
        docId:
          "9e7f0f0560cb99c57396738feffc80a313aa592ced1aeb1b9af4968daac506c7",
        country: "HK",
        documentStatus: "UPLOADED",
        appId: "04271788909e312024",
        documentCategoryCode: "R0006",
        errorDescription: null,
        errorCode: null,
        responseStatus: "SUCCESS",
        documentTypeCode: "A039",
        documentOptionSequence: "1",
        imageOrder: "1",
        applicantId: "1",
        period: 0,
        documentName: "Selfie_Image1732689656642",
      },
    ],
    zoloz_value: "Success",
    Juvenile_Result: "Y",
  };
  const imgUrl = useSelector((state: any) => {
    return state?.preApproval?.imgPrevURL || imgUrlStatic;
  });
  const docName = useSelector((state: any) => {
    return state?.preApproval?.documentZoloCheckRes?.data?.documents[0]
      ?.documentName;
  });
  const stageSelector = useSelector(
    (state: StoreModel) => state.stages.stages[0].stageInfo
  );
  const footeContent =
    "File format should be in JPG or PNG. The individual file size must not exceed 5MB. Click";
  const copyRights = "© Standard Chartered Bank (HK) Limited";
  const images: any = [
    {
      banner: banner1,
      step: "Step 1",
      stepText: "Scan the QR code with a mobile phone",
    },
    {
      banner: banner2,
      step: "Step 2",
      stepText:
        "Remove card holder and place it on a flat surface under adequate lighting",
    },
    {
      banner: banner3,
      step: "Step 3",
      stepText:
        "Capture ID from above and align the edges with the rectangular frames",
    },
    {
      banner: banner4,
      step: "Step 4",
      stepText: "Tilt mobile phone about 30-degree and capture from aside",
    },
    {
      banner: banner5,
      step: "Step 5",
      stepText:
        "Remove accessories and face mask and place full face in the circular frame and blink once as instructed",
    },
    {
      banner: banner6,
      step: "Step 6",
      stepText: "Return to desktop browser and click “Submit” to continue",
    },
  ];

  const closeFileUpload = () => {
    dispatch(stagesAction.updatefileSectionData([]));
    dispatch(stagesAction.updateshowUploadFileSuccess(false));
    dispatch(stagesAction.updateShowIncomeProof(""));
  };

  const openImagePreview = (img: any, name: any) => {
    setImageURL(img);
    setName(name);
    setImagePreview(true);
  };

  const callQRCodeAPI = () => {
    dispatch(dispatchLoader(true));
    postQRCodeZOLO(channel_reference, HKIDVersionValue)
      .then((response: any) => {
        if (response.status === 200) {
          // setHKIDQRCodeData(response.data);
          dispatch(stagesAction.updateHKIDQRCodeData(response.data));
          dispatch(dispatchLoader(false));
        }
      })
      .catch((error: AxiosError) => {
        dispatchError(error);
      });
  };

  const callSubmit = async () => {
    try {
      var transactionId = HKIDQRCodeData.transactionId;
      var docType = HKIDVersionValue;
      var document_type_code =
        stageSelector.applicant_documents[0]?.document_list[0]
          ?.document_options[0]?.document_types[0]?.document_type_code;
      // var document_type_code = "A001";

      const zoloCheckResponse = await postZOLOCheck(
        channel_reference,
        transactionId,
        docType
      );

      console.log("zoloCheckResponse :", zoloCheckResponse);
      if (zoloCheckResponse.data?.documents?.length > 0) {
        dispatch(dispatchLoader(true));
        console.log("res:", res.documents);
        const documents = zoloCheckResponse?.data?.documents || [];
        const docId = documents[0]?.docId;
        // setZolozDocumentData(documents[0]);
        dispatch(stagesAction.updatezolozDocumentData(documents[0]));
        const docFilter = documents.filter(
          (item: any) => item.document_type_code === document_type_code
        );

        //Update state with ZOLO check response
        dispatch(preApprovalAction.setDocumentZoloCheckRes(zoloCheckResponse));
        // dispatch(preApprovalAction.setDocumentZoloCheckRes(res));

        //Achnowledge the post
        const acknowledgeResponse = await postZolozAcknowledge(
          channel_reference,
          documents
        );

        console.log("acknowledgeResponse:", acknowledgeResponse);
        const resStatus = acknowledgeResponse?.data?.[0]?.responseStatus;
        /* istanbul ignore else */
        if (resStatus === "Success") {
          dispatch(dispatchLoader(false));
          setOpenSuccessModal(true);
          dispatch(stagesAction.updateshowUploadFileSuccess(true));

          //Fetch and handle image preview
          const imagePreviewResponse = await getImagePreview(
            channel_reference,
            docId
          );
          console.log("imagePreviewResponse:", imagePreviewResponse);

          /* istanbul ignore else */
          if (imagePreviewResponse.status === 200) {
            const blob = imagePreviewResponse?.data;
            const imgObjURL = URL.createObjectURL(blob);
            dispatch(preApprovalAction.setImgPrevURL(imgObjURL));
            //PDF Preview
            const pdfPreviewRes = await postPdfPreview(channel_reference);
            if (pdfPreviewRes.status >= 200 && pdfPreviewRes.status < 300) {
              /* istanbul ignore else */
              if (pdfPreviewRes.data.statusCode.toUpperCase() === "OK") {
                // setDocumentData(pdfPreviewRes.data.documents);
                console.log(
                  "pdfPreviewRes.data.documents:",
                  pdfPreviewRes.data.documents
                );
                dispatch(
                  stagesAction.updatedocumentData(pdfPreviewRes.data.documents)
                );
                dispatch(dispatchLoader(false));
              }
            } else {
              dispatch(dispatchLoader(false));
            }
          }
        }
      } else {
        dispatch(dispatchLoader(false));
        setZoloErrorpopup(true);
      }
    } catch (error) {
      console.log("error:", error);
    }
  };
  const successModalClose = () => {
    setOpenSuccessModal(false);
  };

  const modelClose = () => {
    setZoloErrorpopup(false);
    callQRCodeAPI();
  };
  const okBtnClick = () => {
    const tempData = {
      file: docName,
      filename: "sample.png",
      filesize: "5MB",
      docId: "2839219a23f703291b3f5a99707e986c12f64e07c492f3c6af5a8ece48587f54",
      country: "HK",
      documentStatus: "UPLOADED",
      appId: "04041ed2f9a3a12024",
      documentCategoryCode: "R0005",
      errorDescription: null,
      errorCode: null,
      responseStatus: null,
      documentTypeCode: "A023",
      documentOptionSequence: "undefined",
      imageOrder: "1",
      applicantId: "1",
      period: 0,
    };

    let filesValue = stageSelector.applicant_documents[0].document_list; //documentList
    let filesData: any = JSON.parse(JSON.stringify(filesValue));
    for (let i in filesData) {
      if (
        filesData[i].document_category === fileSectionData.document_category
      ) {
        filesData[i].document_options[0].document_types[0].uploaded_documents =
          tempData;
      }
    }
    let stageData = JSON.parse(JSON.stringify(stageSelector));
    stageData.applicant_documents[0].document_list = filesData;
    dispatch(
      stagesAction.getStage({
        id: CONSTANTS.STAGE_NAMES.DOC_3,
        formConfig: stageData,
      })
    );
    setContinueBtnVisiblity(true);
    dispatch(stagesAction.updateDocumentCount(documentCount + 1));
    dispatch(stagesAction.updatefileSectionData([]));
    // setShowIncomeProof("");
    dispatch(stagesAction.updateShowIncomeProof(""));
    dispatch(stagesAction.updatechangechangeIconIncomeProof(false));
    dispatch(stagesAction.updateSuccess(true));
    setHKIDVersion("");
    setShowContinueBtn(false);
  };
  return (
    <>
      <div className="container">
        {
          <PopupModel displayPopup={openSuccessModal}>
            <AlertModel alertType="Success" goBack={successModalClose} />
          </PopupModel>
        }

        {zoloErrorpopup && (
          <PopupModel displayPopup={zoloErrorpopup}>
            <AlertModel alertType={"zoloError"} goBack={modelClose} />
          </PopupModel>
        )}
        <div className="uploadHkDocument">
          <p className="doc-close" onClick={closeFileUpload}>
            <span className="doc-close-btn"></span>
            CLOSE
          </p>
          <p className="hk-proof-name">Colour Identity Proof</p>
        </div>
        <div className="qrMainLayOut">
          {!showUploadFileSuccess && (
            <>
              {" "}
              <div className="qrCodeContent">
                <div className="desktop-img">
                  <Carousel
                    image={images}
                    position={"absolute"}
                    top={"3em"}
                    left={"-4%"}
                    right={"55%"}
                    marginLeft={"20%"}
                    marginTop={"8%"}
                  />
                </div>
              </div>
              <div className="qrImageSection">
                <img
                  src={`data:image/png;base64,${HKIDQRCodeData?.qrCode}`}
                  alt="ORError"
                />
                <div className="qrSubmitButton">
                  <label
                    role="button"
                    title="submit-button"
                    className="upload-btn"
                    onClick={callSubmit}
                  >
                    <span className="upload-img"></span>
                    Submit
                  </label>
                </div>
              </div>
            </>
          )}
          {imagePreview && (
            <ImagePreviewModal
              imgeURL={imgeURL}
              name={name}
              imagePreview={imagePreview}
              setImagePreview={setImagePreview}
            />
          )}

          {showUploadFileSuccess && (
            <>
              <div className="upload-btn1" key={"index"}>
                <div className="thumbnail-img-container">
                  <a>
                    <img
                      data-testid="image-preview"
                      title="image-preview"
                      src={imgUrl}
                      onClick={() => openImagePreview(imgUrl, docName)}
                    ></img>
                  </a>
                </div>
                <div className="container-image">
                  <div className="uploading-doc-name">
                    <span className="span-file-name">{docName}</span>
                    <div className="progress-text-icon"></div>
                  </div>
                  <div
                    className={
                      "Upload completed" === "Upload completed"
                        ? // docStatus==="UPLOADED"
                          "uploaded"
                        : "retry-uploaded"
                    }
                  ></div>
                  <div
                    className={
                      "Upload completed" === "Upload completed"
                        ? "tick-mark"
                        : "no-tick-mark"
                    }
                  >
                    Upload completed
                  </div>
                </div>
              </div>
            </>
          )}
        </div>
        <div className="hk-copy-rights">
          <p>{copyRights}</p>
        </div>
      </div>
      {showUploadFileSuccess && (
        <>
          <div className="footer footer-set">
            {
              <div role="button" className="back" onClick={closeFileUpload}>
                <span className="arrow"></span>
                Back
              </div>
            }
            <button
              role="button"
              title="Colour Identity Proof"
              type="submit"
              className={
                !showUploadFileSuccess
                  ? `continue form-invalid`
                  : `continue form-valid`
              }
              onClick={okBtnClick}
              // disabled={HKIDVersion === ""}
            >
              Continue
            </button>
          </div>
        </>
      )}
    </>
  );
};

export default QRScreen;











import React from "react";
import { render, screen, fireEvent, waitFor } from "@testing-library/react";
import { Provider } from "react-redux";
import configureStore from "redux-mock-store";
import thunk from "redux-thunk";
import QRScreen from "../QRScreen";
import * as preApprovalServices from "../../../services/preApprovalPostServices";
import * as commonService from "../../../../../services/common-service";
import { stagesAction } from "../../../../../utils/store/stages-slice";

// Mock images
jest.mock("../images-du/illustration-03@3x.png", () => "mockBanner1");
jest.mock("../images-du/illustration-06@3x.png", () => "mockBanner2");
jest.mock("../images-du/illustration-05@3x.png", () => "mockBanner3");
jest.mock("../images-du/illustration-02@3x.png", () => "mockBanner4");
jest.mock("../images-du/illustration-01@3x.png", () => "mockBanner5");
jest.mock("../images-du/illustration-04@3x.png", () => "mockBanner6");

// Mock API calls
jest.mock("../../../services/preApprovalPostServices", () => ({
  postQRCodeZOLO: jest.fn(),
  postZOLOCheck: jest.fn(),
  postZolozAcknowledge: jest.fn(),
  postPdfPreview: jest.fn(),
}));

// Mock dispatch actions
jest.mock("../../../../../services/common-service", () => ({
  dispatchLoader: jest.fn(),
  dispatchError: jest.fn(),
}));

const middlewares = [thunk];
const mockStore = configureStore(middlewares);

describe("QRScreen Component", () => {
  let store: any;
  let mockDispatch: jest.Mock;

  beforeEach(() => {
    mockDispatch = jest.fn();
    store = mockStore({
      stages: {
        dynamicDocumentsUpload: {
          showUploadFileSuccess: false,
          HKIDQRCodeData: { qrCode: "mockQRCode", transactionId: "12345" },
          HKIDVersionValue: "mockVersion",
          fileSectionData: {},
          documentCount: 1,
          showIncomeProof: false,
        },
        stages: [
          {
            stageInfo: {
              applicant_documents: [
                {
                  document_list: [
                    {
                      document_category: "R0001",
                      document_options: [
                        {
                          document_types: [
                            {
                              document_type_code: "A001",
                              uploaded_documents: null,
                            },
                          ],
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          },
        ],
      },
      preApproval: {
        imgPrevURL: "mockImageURL",
        documentZoloCheckRes: {
          data: {
            documents: [
              { documentName: "mockDocument", docId: "mockDocId" },
            ],
          },
        },
      },
    });

    store.dispatch = mockDispatch;
  });

  it("renders QRScreen correctly", () => {
    render(
      <Provider store={store}>
        <QRScreen setHKIDVersion={jest.fn()} setShowContinueBtn={jest.fn()} />
      </Provider>
    );

    expect(screen.getByText("Colour Identity Proof")).toBeInTheDocument();
    expect(screen.getByAltText("ORError")).toBeInTheDocument();
    expect(screen.getByText("© Standard Chartered Bank (HK) Limited")).toBeInTheDocument();
  });

  it("calls postQRCodeZOLO API on component mount", async () => {
    (preApprovalServices.postQRCodeZOLO as jest.Mock).mockResolvedValue({
      status: 200,
      data: { qrCode: "mockQRCodeData" },
    });

    render(
      <Provider store={store}>
        <QRScreen setHKIDVersion={jest.fn()} setShowContinueBtn={jest.fn()} />
      </Provider>
    );

    await waitFor(() => {
      expect(preApprovalServices.postQRCodeZOLO).toHaveBeenCalled();
    });
  });

  it("handles Submit button click and API success", async () => {
    (preApprovalServices.postZOLOCheck as jest.Mock).mockResolvedValue({
      data: {
        documents: [{ docId: "mockDocId", document_type_code: "A001" }],
      },
    });

    (preApprovalServices.postZolozAcknowledge as jest.Mock).mockResolvedValue({
      data: [{ responseStatus: "Success" }],
    });

    render(
      <Provider store={store}>
        <QRScreen setHKIDVersion={jest.fn()} setShowContinueBtn={jest.fn()} />
      </Provider>
    );

    fireEvent.click(screen.getByText("Submit"));

    await waitFor(() => {
      expect(preApprovalServices.postZOLOCheck).toHaveBeenCalled();
      expect(preApprovalServices.postZolozAcknowledge).toHaveBeenCalled();
      expect(mockDispatch).toHaveBeenCalledWith(
        stagesAction.updateshowUploadFileSuccess(true)
      );
    });
  });

  it("handles API error when submitting", async () => {
    (preApprovalServices.postZOLOCheck as jest.Mock).mockRejectedValue(
      new Error("API Error")
    );

    render(
      <Provider store={store}>
        <QRScreen setHKIDVersion={jest.fn()} setShowContinueBtn={jest.fn()} />
      </Provider>
    );

    fireEvent.click(screen.getByText("Submit"));

    await waitFor(() => {
      expect(preApprovalServices.postZOLOCheck).toHaveBeenCalled();
      expect(commonService.dispatchError).toHaveBeenCalled();
    });
  });

  it("closes file upload section when Close button is clicked", () => {
    render(
      <Provider store={store}>
        <QRScreen setHKIDVersion={jest.fn()} setShowContinueBtn={jest.fn()} />
      </Provider>
    );

    fireEvent.click(screen.getByText("CLOSE"));

    expect(mockDispatch).toHaveBeenCalledWith(
      stagesAction.updatefileSectionData([])
    );
  });

  it("opens image preview modal when document is uploaded", async () => {
    store = mockStore({
      ...store.getState(),
      stages: {
        ...store.getState().stages,
        dynamicDocumentsUpload: {
          showUploadFileSuccess: true,
        },
      },
    });

    render(
      <Provider store={store}>
        <QRScreen setHKIDVersion={jest.fn()} setShowContinueBtn={jest.fn()} />
      </Provider>
    );

    fireEvent.click(screen.getByTestId("image-preview"));

    expect(screen.getByTestId("image-preview")).toBeInTheDocument();
  });

  it("renders Continue button after successful file upload", async () => {
    store = mockStore({
      ...store.getState(),
      stages: {
        ...store.getState().stages,
        dynamicDocumentsUpload: {
          showUploadFileSuccess: true,
        },
      },
    });

    render(
      <Provider store={store}>
        <QRScreen setHKIDVersion={jest.fn()} setShowContinueBtn={jest.fn()} />
      </Provider>
    );

    const continueButton = screen.getByText("Continue");
    expect(continueButton).toBeInTheDocument();

    fireEvent.click(continueButton);

    await waitFor(() => {
      expect(mockDispatch).toHaveBeenCalledWith(
        stagesAction.updateSuccess(true)
      );
    });
  });
});
