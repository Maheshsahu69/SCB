test("should call getOffer2 and resolve with response", async () => {
  // Mock the state
  jest.spyOn(store, "getState").mockReturnValue({
    stages: {
      stages: [
        {
          stageId: "mockStageId",
          stageInfo: {
            application: {
              channel_reference: "mockChannelRef",
            },
            products: [
              {
                product_type: "mockProductType",
              },
            ],
          },
        },
      ],
    },
  });

  const mockPayload = { someKey: "someValue" };
  const mockResponse = { data: { offerDetails: "mockOfferDetails" }, status: 200 };

  mockedAxios.post.mockResolvedValue(mockResponse);

  const result = await getOffer2(mockPayload);

  // Assertions
  expect(result).toEqual(mockResponse);
  expect(mockedAxios.post).toHaveBeenCalledWith(
    expect.stringContaining("mockChannelRef"), // Ensure the correct endpoint is used
    JSON.stringify({
      ...mockPayload,
      stage: {
        page_id: "mockStageId",
        stage_id: "MOCKSTAGEID",
        stage_status: "incomplete",
      },
      applicants: expect.any(Object), // Ensure applicants field is present
      client: expect.any(Object), // Ensure client field is present
    }),
    expect.objectContaining({
      headers: expect.objectContaining({
        "Content-Type": "application/json;charset=UTF-8",
      }),
    })
  );
});

test("should handle error in getOffer2", async () => {
  // Mock the state
  jest.spyOn(store, "getState").mockReturnValue({
    stages: {
      stages: [
        {
          stageId: "mockStageId",
          stageInfo: {
            application: {
              channel_reference: "mockChannelRef",
            },
          },
        },
      ],
    },
  });

  const mockPayload = { someKey: "someValue" };
  const mockError = new Error("Offer2 API error");

  mockedAxios.post.mockRejectedValue(mockError);

  await expect(getOffer2(mockPayload)).rejects.toThrow("Offer2 API error");

  // Ensure dispatchError is called
  expect(commonService.dispatchError).toHaveBeenCalledWith(mockError);
});


test("should call getOfferCalulated and resolve with response", async () => {
  // Mock the state
  jest.spyOn(store, "getState").mockReturnValue({
    stages: {
      stages: [
        {
          stageInfo: {
            application: {
              channel_reference: "mockChannelRef",
              cos_ref_number: "mockCosRef",
              application_reference: "mockAppRef",
            },
          },
        },
      ],
    },
  });

  const mockData = {
    requested_amount: 10000,
    requested_tenure: 12,
  };
  const mockResponse = { data: { calculatedOffer: "mockCalculatedOffer" }, status: 200 };

  mockedAxios.post.mockResolvedValue(mockResponse);

  const result = await getOfferCalulated(mockData);

  // Assertions
  expect(result).toEqual(mockResponse);
  expect(mockedAxios.post).toHaveBeenCalledWith(
    expect.stringContaining("mockChannelRef"), // Ensure the correct endpoint is used
    JSON.stringify({
      channel_ref_number: "mockChannelRef",
      cos_ref_number: "mockCosRef",
      application_reference: "mockAppRef",
      source_system_name: "02",
      requested_amount: 10000,
      requested_tenure: 12,
    }),
    expect.objectContaining({
      headers: expect.objectContaining({
        "Content-Type": "application/json;charset=UTF-8",
      }),
    })
  );
});



test("should handle error in getOfferCalulated", async () => {
  // Mock the state
  jest.spyOn(store, "getState").mockReturnValue({
    stages: {
      stages: [
        {
          stageInfo: {
            application: {
              channel_reference: "mockChannelRef",
              cos_ref_number: "mockCosRef",
              application_reference: "mockAppRef",
            },
          },
        },
      ],
    },
  });

  const mockData = {
    requested_amount: 10000,
    requested_tenure: 12,
  };
  const mockError = new Error("OfferCalulated API error");

  mockedAxios.post.mockRejectedValue(mockError);

  await expect(getOfferCalulated(mockData)).rejects.toThrow("OfferCalulated API error");

  // Ensure dispatchError is called
  expect(commonService.dispatchError).toHaveBeenCalledWith(mockError);
});



import { postBasicData } from "./yourFile";
import axios from "axios";
import { store } from "../../../utils/store/store";
import PreApprovalUtil from "./preApprovalUtils";
import { dispatchError } from "../../../services/common-service";

jest.mock("axios"); // Mock axios globally
jest.mock("../../../utils/store/store", () => ({
  store: {
    getState: jest.fn(),
  },
}));
jest.mock("./preApprovalUtils", () => ({
  getFormConfigPayload: jest.fn(),
  getAckMetaData: jest.fn(),
}));
jest.mock("../../../services/common-service", () => ({
  dispatchError: jest.fn(),
}));

const mockedAxios = axios as jest.Mocked<typeof axios>;

describe("postBasicData", () => {
  beforeEach(() => {
    mockedAxios.post.mockReset();
    (store.getState as jest.Mock).mockReturnValue({
      stages: {
        stages: [
          {
            stageInfo: {
              application: {
                channel_reference: "mocked_channel_ref",
              },
            },
          },
        ],
      },
    });

    PreApprovalUtil.getFormConfigPayload.mockReturnValue({
      applicants: {},
      application: {},
    });

    PreApprovalUtil.getAckMetaData.mockReturnValue("mocked_ack_meta_data");
  });

  it("should call axios.post with correct arguments and resolve", async () => {
    // Mock environment variables
    process.env.REACT_APP_RTOB_BASE_URL = "https://mock-base-url";
    process.env.REACT_APP_RTOB_APPLICATION_END_POINT = "/application-endpoint/";
    process.env.REACT_APP_RTOB_BASIC_DATA_END_POINT = "/basic-data-endpoint/";

    const mockedResponse = { data: "mocked_response" };
    mockedAxios.post.mockResolvedValueOnce(mockedResponse);

    const result = await postBasicData();

    const expectedUrl =
      "https://mock-base-url/application-endpoint/mocked_channel_ref/basic-data-endpoint/";
    const expectedHeaders = {
      "Content-Type": "application/json;charset=UTF-8",
      "Sc-Client-Context": "mocked_ack_meta_data",
    };
    const expectedPayload = JSON.stringify({
      applicants: {},
      application: {},
    });

    expect(mockedAxios.post).toHaveBeenCalledWith(expectedUrl, expectedPayload, {
      headers: expectedHeaders,
    });
    expect(result).toEqual(mockedResponse);
  });

  it("should handle axios.post rejection and call dispatchError", async () => {
    // Mock environment variables
    process.env.REACT_APP_RTOB_BASE_URL = "https://mock-base-url";
    process.env.REACT_APP_RTOB_APPLICATION_END_POINT = "/application-endpoint/";
    process.env.REACT_APP_RTOB_BASIC_DATA_END_POINT = "/basic-data-endpoint/";

    const mockedError = new Error("mocked_error");
    mockedAxios.post.mockRejectedValueOnce(mockedError);

    await expect(postBasicData()).rejects.toThrow("mocked_error");

    expect(dispatchError).toHaveBeenCalledWith(mockedError);
  });
});

import { postZOLOCheck } from "./yourFile";
import axios from "axios";
import { store } from "../../../utils/store/store";
import PreApprovalUtil from "./preApprovalUtils";
import { dispatchError } from "../../../services/common-service";

jest.mock("axios");
jest.mock("../../../utils/store/store", () => ({
  store: {
    getState: jest.fn(),
  },
}));
jest.mock("./preApprovalUtils", () => ({
  getAckMetaData: jest.fn(),
}));
jest.mock("../../../services/common-service", () => ({
  dispatchError: jest.fn(),
}));

const mockedAxios = axios as jest.Mocked<typeof axios>;

describe("postZOLOCheck", () => {
  beforeEach(() => {
    mockedAxios.post.mockReset();
    (store.getState as jest.Mock).mockReturnValue({
      stages: {
        stages: [
          {
            stageInfo: {
              applicants: {
                first_name_a_1: "John",
                last_name_a_1: "Doe",
                date_of_birth_a_1: "1990-01-01",
                HKID_a_1: "A1234567",
                product_type: "CreditCard",
                product_category: "Platinum",
              },
              application: {
                cos_ref_number: "COS123456",
              },
            },
          },
        ],
      },
    });

    PreApprovalUtil.getAckMetaData.mockReturnValue("mocked_ack_meta_data");
  });

  it("should call axios.post with correct arguments and resolve", async () => {
    // Mock environment variables
    process.env.REACT_APP_RTOB_BASE_URL = "https://mock-base-url";
    process.env.REACT_APP_RTOB_APPLICATION_END_POINT = "/application-endpoint/";
    process.env.REACT_APP_RTOB_ZOLO_CHECK_RESULT_END_POINT = "/zolo-check-endpoint/";

    const mockedResponse = { data: "mocked_response" };
    mockedAxios.post.mockResolvedValueOnce(mockedResponse);

    const channelReference = "mocked_channel_ref";
    const transactionId = "txn123456";
    const docType = "HKID";

    const result = await postZOLOCheck(channelReference, transactionId, docType);

    const expectedUrl = "https://mock-base-url/application-endpoint/mocked_channel_ref/zolo-check-endpoint/";
    const expectedPayload = {
      transactionId: "txn123456",
      isReturnImage: "Y",
      first_name_a_1: "John",
      last_name_a_1: "Doe",
      date_of_birth_a_1: "1990-01-01",
      HKID_a_1: "A1234567",
      product_type: "CreditCard",
      product_category: "Platinum",
      hkid_type: "HKID",
      cos_ref_number: "COS123456",
    };
    const expectedHeaders = {
      "Content-Type": "application/json;charset=UTF-8",
      "Sc-Client-Context": "mocked_ack_meta_data",
    };

    expect(mockedAxios.post).toHaveBeenCalledWith(expectedUrl, JSON.stringify(expectedPayload), {
      headers: expectedHeaders,
    });
    expect(result).toEqual(mockedResponse);
  });

  it("should handle axios.post rejection and call dispatchError", async () => {
    // Mock environment variables
    process.env.REACT_APP_RTOB_BASE_URL = "https://mock-base-url";
    process.env.REACT_APP_RTOB_APPLICATION_END_POINT = "/application-endpoint/";
    process.env.REACT_APP_RTOB_ZOLO_CHECK_RESULT_END_POINT = "/zolo-check-endpoint/";

    const mockedError = new Error("mocked_error");
    mockedAxios.post.mockRejectedValueOnce(mockedError);

    const channelReference = "mocked_channel_ref";
    const transactionId = "txn123456";
    const docType = "HKID";

    await expect(postZOLOCheck(channelReference, transactionId, docType)).rejects.toThrow(
      "mocked_error"
    );

    expect(dispatchError).toHaveBeenCalledWith(mockedError);
  });
});


import { postZoloAcknowledge } from "./yourFile";
import axios from "axios";
import { store } from "../../../utils/store/store";
import PreApprovalUtil from "./preApprovalUtils";
import { dispatchError } from "../../../services/common-service";

jest.mock("axios");
jest.mock("../../../utils/store/store", () => ({
  store: {
    getState: jest.fn(),
  },
}));
jest.mock("./preApprovalUtils", () => ({
  getAckMetaData: jest.fn(),
}));
jest.mock("../../../services/common-service", () => ({
  dispatchError: jest.fn(),
}));

const mockedAxios = axios as jest.Mocked<typeof axios>;

describe("postZoloAcknowledge", () => {
  beforeEach(() => {
    mockedAxios.post.mockReset();
    (store.getState as jest.Mock).mockReturnValue({
      stages: {
        stages: [
          {
            stageInfo: {
              application: {
                channel_reference: "mocked_channel_ref",
                application_reference: "mocked_application_ref",
              },
            },
          },
        ],
      },
    });

    PreApprovalUtil.getAckMetaData.mockReturnValue("mocked_ack_meta_data");
  });

  it("should call axios.post with correct arguments and resolve", async () => {
    // Mock environment variables
    process.env.REACT_APP_RTOB_BASE_URL = "https://mock-base-url";
    process.env.REACT_APP_RTOB_APPLICATION_END_POINT = "/application-endpoint/";
    process.env.REACT_APP_RTOB_DOCUMENTS_END_POINT = "/documents-endpoint/";
    process.env.REACT_APP_RTOB_ACKNOWLEDGE_END_POINT = "/acknowledge-endpoint/";

    const mockedResponse = { data: "mocked_response" };
    mockedAxios.post.mockResolvedValueOnce(mockedResponse);

    const channelReference = "mocked_channel_ref";
    const documentsList = [
      {
        docId: "doc123",
        documentName: "testDocument.pdf",
        documentStatus: "Accepted",
      },
    ];

    const result = await postZoloAcknowledge(channelReference, documentsList);

    const expectedUrl =
      "https://mock-base-url/application-endpoint/mocked_channel_ref/documents-endpoint/acknowledge-endpoint/";
    const expectedPayload = {
      applicationRefNo: "mocked_application_ref",
      documents: documentsList,
      optionsSelected: [
        {
          applicantId: 1,
          options: [
            {
              documentCategoryCode: "R0001",
              documentTypeCode: "A001",
              documentOptionSequence: "1",
            },
          ],
        },
      ],
      stage: "Zoloz_ACK",
    };
    const expectedHeaders = {
      "Content-Type": "application/json;charset=UTF-8",
      "Sc-Client-Context": "mocked_ack_meta_data",
    };

    expect(mockedAxios.post).toHaveBeenCalledWith(expectedUrl, JSON.stringify(expectedPayload), {
      headers: expectedHeaders,
    });
    expect(result).toEqual(mockedResponse);
  });

  it("should handle axios.post rejection and call dispatchError", async () => {
    // Mock environment variables
    process.env.REACT_APP_RTOB_BASE_URL = "https://mock-base-url";
    process.env.REACT_APP_RTOB_APPLICATION_END_POINT = "/application-endpoint/";
    process.env.REACT_APP_RTOB_DOCUMENTS_END_POINT = "/documents-endpoint/";
    process.env.REACT_APP_RTOB_ACKNOWLEDGE_END_POINT = "/acknowledge-endpoint/";

    const mockedError = new Error("mocked_error");
    mockedAxios.post.mockRejectedValueOnce(mockedError);

    const channelReference = "mocked_channel_ref";
    const documentsList = [
      {
        docId: "doc123",
        documentName: "testDocument.pdf",
        documentStatus: "Accepted",
      },
    ];

    await expect(postZoloAcknowledge(channelReference, documentsList)).rejects.toThrow(
      "mocked_error"
    );

    expect(dispatchError).toHaveBeenCalledWith(mockedError);
  });
});

import { postFinalAcknowledge } from "./yourFile";
import axios from "axios";
import { store } from "../../../utils/store/store";
import PreApprovalUtil from "./preApprovalUtils";
import { dispatchError } from "../../../services/common-service";

jest.mock("axios");
jest.mock("../../../utils/store/store", () => ({
  store: {
    getState: jest.fn(),
  },
}));
jest.mock("./preApprovalUtils", () => ({
  getAckMetaData: jest.fn(),
}));
jest.mock("../../../services/common-service", () => ({
  dispatchError: jest.fn(),
}));

const mockedAxios = axios as jest.Mocked<typeof axios>;

describe("postFinalAcknowledge", () => {
  beforeEach(() => {
    mockedAxios.post.mockReset();
    (store.getState as jest.Mock).mockReturnValue({
      stages: {
        stages: [
          {
            stageInfo: {
              application: {
                channel_reference: "mocked_channel_ref",
                application_reference: "mocked_application_ref",
              },
            },
          },
        ],
      },
    });

    PreApprovalUtil.getAckMetaData.mockReturnValue("mocked_ack_meta_data");
  });

  it("should call axios.post with correct arguments and resolve", async () => {
    // Mock environment variables
    process.env.REACT_APP_RTOB_BASE_URL = "https://mock-base-url";
    process.env.REACT_APP_RTOB_APPLICATION_END_POINT = "/application-endpoint/";
    process.env.REACT_APP_RTOB_DOCUMENTS_END_POINT = "/documents-endpoint/";
    process.env.REACT_APP_RTOB_ACKNOWLEDGE_END_POINT = "/acknowledge-endpoint/";

    const mockedResponse = { data: "mocked_response" };
    mockedAxios.post.mockResolvedValueOnce(mockedResponse);

    const channelReference = "mocked_channel_ref";

    const result = await postFinalAcknowledge(channelReference);

    const expectedUrl =
      "https://mock-base-url/application-endpoint/mocked_channel_ref/documents-endpoint/acknowledge-endpoint/";
    const expectedPayload = {
      applicationRefNo: "mocked_application_ref",
      documents: [],
      optionsSelected: [
        {
          applicantId: 1,
          options: [],
        },
      ],
      stage: "Final_ACK",
    };
    const expectedHeaders = {
      "Content-Type": "application/json;charset=UTF-8",
      "Sc-Client-Context": "mocked_ack_meta_data",
    };

    expect(mockedAxios.post).toHaveBeenCalledWith(expectedUrl, JSON.stringify(expectedPayload), {
      headers: expectedHeaders,
    });
    expect(result).toEqual(mockedResponse);
  });

  it("should handle axios.post rejection and call dispatchError", async () => {
    // Mock environment variables
    process.env.REACT_APP_RTOB_BASE_URL = "https://mock-base-url";
    process.env.REACT_APP_RTOB_APPLICATION_END_POINT = "/application-endpoint/";
    process.env.REACT_APP_RTOB_DOCUMENTS_END_POINT = "/documents-endpoint/";
    process.env.REACT_APP_RTOB_ACKNOWLEDGE_END_POINT = "/acknowledge-endpoint/";

    const mockedError = new Error("mocked_error");
    mockedAxios.post.mockRejectedValueOnce(mockedError);

    const channelReference = "mocked_channel_ref";

    await expect(postFinalAcknowledge(channelReference)).rejects.toThrow("mocked_error");

    expect(dispatchError).toHaveBeenCalledWith(mockedError);
  });
});



import { postQRCodeZOLO } from "./yourFile";
import axios from "axios";
import PreApprovalUtil from "./preApprovalUtils";
import { dispatchError } from "../../../services/common-service";

jest.mock("axios");
jest.mock("./preApprovalUtils", () => ({
  getAckMetaData: jest.fn(),
}));
jest.mock("../../../services/common-service", () => ({
  dispatchError: jest.fn(),
}));

const mockedAxios = axios as jest.Mocked<typeof axios>;

describe("postQRCodeZOLO", () => {
  beforeEach(() => {
    mockedAxios.post.mockReset();
    PreApprovalUtil.getAckMetaData.mockReturnValue("mocked_ack_meta_data");
  });

  it("should call axios.post with correct arguments and resolve", async () => {
    // Mock environment variables
    process.env.REACT_APP_RTOB_BASE_URL = "https://mock-base-url";
    process.env.REACT_APP_RTOB_APPLICATION_END_POINT = "/application-endpoint/";
    process.env.REACT_APP_RTOB_QRCODE_SMART_HKID_END_POINT = "/qrcode-endpoint/";

    const mockedResponse = { data: "mocked_response" };
    mockedAxios.post.mockResolvedValueOnce(mockedResponse);

    const channelReference = "mocked_channel_ref";
    const docType = "HKID";

    const result = await postQRCodeZOLO(channelReference, docType);

    const expectedUrl =
      "https://mock-base-url/application-endpoint/mocked_channel_ref/qrcode-endpoint/";
    const expectedPayload = {
      docType: "HKID",
      qrCodeFlag: "Y",
      h5ModeConfig: {
        completeCallbackUrl:
          "https://pt.sc.com/onboarding/hk/zolozThankYou.html?scbToken=mocked_channel_ref&lang=en",
        interruptCallbackUrl:
          "https://pt.sc.com/onboarding/hk/zoloz-error.html?scbToken=mocked_channel_ref&lang=en",
        locale: "",
      },
    };
    const expectedHeaders = {
      "Content-Type": "application/json;charset=UTF-8",
      "Sc-Client-Context": "mocked_ack_meta_data",
    };

    expect(mockedAxios.post).toHaveBeenCalledWith(expectedUrl, JSON.stringify(expectedPayload), {
      headers: expectedHeaders,
    });
    expect(result).toEqual(mockedResponse);
  });

  it("should handle axios.post rejection and call dispatchError", async () => {
    // Mock environment variables
    process.env.REACT_APP_RTOB_BASE_URL = "https://mock-base-url";
    process.env.REACT_APP_RTOB_APPLICATION_END_POINT = "/application-endpoint/";
    process.env.REACT_APP_RTOB_QRCODE_SMART_HKID_END_POINT = "/qrcode-endpoint/";

    const mockedError = new Error("mocked_error");
    mockedAxios.post.mockRejectedValueOnce(mockedError);

    const channelReference = "mocked_channel_ref";
    const docType = "HKID";

    await expect(postQRCodeZOLO(channelReference, docType)).rejects.toThrow("mocked_error");

   
