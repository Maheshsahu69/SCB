import { KeyWithAnyModel, ValidationObjModel } from '../../utils/model/common-model';
import rulesUtils from './rules.utils';
import { checkProductDetails } from '../../services/common-service';
import { authenticateType, getUrl } from '../../utils/common/change.utils';

const Rules_ld_1 = (props: KeyWithAnyModel, stageInfo: KeyWithAnyModel): KeyWithAnyModel => {
 const validationObj: ValidationObjModel = {
        nonEditable: [],
        hidden: [],
        modifyVisibility:[]
    };
    const auth = authenticateType()
    const isCASAProduct = checkProductDetails(stageInfo.products);
    let defaultVisiblity:any= []
    /*istanbul ignore else */
    if(auth === "manual"||"myinfo"){
      let hiddenFields = ["email","full_name","date_of_birth","mobile_number","residency_status","NRIC","work_type","year_of_assessment_fff_1","year_of_assessment_fff_2","annual_income_fff_1","annual_income_fff_2","dsa_code",
        "credit_limit_consent"]
       if(auth === "myinfo") {
            hiddenFields.push(
            "postal_code",
            "postal",
            "block",
            "building_name",
            "street_name",
            "unit_no",
            "account_currency_9",
            "myinfo_data_cli",
            "banca_ins_request_1",
            "banca_ins_request_2",
            "banca_ins_request_amount",
            "banca_ins_Consent_rp2",
            "banca_ins_Consent_rp3",
            "banca_ins_Consent_rp5",
            "banca_ins_Consent_rp6",
            "myinfo_data_cli_1",
            "contact_preference",
            "multi_currency_selection",
            "credit_limit_consent_1",
            "contact_preference_casa"
            );
            defaultVisiblity.push("residential_address")
            const nonEditableFields = ["marital_status","residential_address"]
            validationObj.nonEditable.push(nonEditableFields)
        }
         
/*istanbul ignore else */
        if(!isCASAProduct){
            hiddenFields.push('nationality_add');
        }
        if(stageInfo.applicants['residency_status_a_1'] === "CT"){
            hiddenFields.push("postal_code_other")
 
        }
        if(stageInfo.applicants['residency_status_a_1'] === "FR"){
            hiddenFields.push("postal_code")
 
        }
 
        if(stageInfo.applicants['residency_status_a_1'] === "FR"){
            defaultVisiblity = ["overseas_contact_country_code","overseas_contact_area_code","overseas_contact_no"];
        }
        defaultVisiblity.push( "residential_address_consent","block","street_name")
        validationObj.hidden!.push(hiddenFields);
        validationObj.modifyVisibility!.push(defaultVisiblity)
      }
 
    return rulesUtils(props, validationObj);
}

export default Rules_ld_1;








import Rules_ld_1 from "./rules_ld-1";
import rulesUtils from "./rules.utils";
import { KeyWithAnyModel,ValidationObjModel } from "../../utils/model/common-model";
jest.mock('./rules.utils',()=> jest.fn())

jest.mock("axios", () => ({
   __esModule: true,
 }));
 

describe('ld1 rules',()=>{
 test('render rule utils',()=>{
    const mockProps:KeyWithAnyModel={key1:'value1',key2:'value2'};
    const mockState:KeyWithAnyModel={stateKey:'stateValue'};
    const _s={};
    const mockValidationObj:ValidationObjModel={nonEditable:[],hidden:[]}
    const mockReturnValue:KeyWithAnyModel={processedKey:"processdValue"};

    (rulesUtils as jest.Mock).mockReturnValue(mockReturnValue)
    const result = Rules_ld_1(mockProps, mockState);
 expect(rulesUtils).toHaveBeenCalledWith(mockProps,mockValidationObj);
 expect(result).toEqual(mockReturnValue);

 });
});










import Rules_ld_1 from "./rules_ld-1";
import rulesUtils from "./rules.utils";
import { KeyWithAnyModel, ValidationObjModel } from "../../utils/model/common-model";
import { checkProductDetails } from "../../services/common-service";
import { authenticateType } from "../../utils/common/change.utils";

jest.mock("./rules.utils", () => jest.fn());
jest.mock("../../services/common-service", () => ({
  checkProductDetails: jest.fn(),
}));
jest.mock("../../utils/common/change.utils", () => ({
  authenticateType: jest.fn(),
}));

describe("Rules_ld_1 Function", () => {
  let mockProps: KeyWithAnyModel;
  let mockState: KeyWithAnyModel;

  beforeEach(() => {
    jest.clearAllMocks();
    mockProps = { key1: "value1", key2: "value2" };
    mockState = {
      products: ["product1"],
      applicants: {
        residency_status_a_1: "CT", // Ensure a defined value
      },
    };
  });

  test("should return correct validation object when auth is 'manual'", () => {
    (authenticateType as jest.Mock).mockReturnValue("manual");
    (checkProductDetails as jest.Mock).mockReturnValue(false);

    const expectedValidationObj: ValidationObjModel = {
      nonEditable: [],
      hidden: [
        "email", "full_name", "date_of_birth", "mobile_number", "residency_status", "NRIC",
        "work_type", "year_of_assessment_fff_1", "year_of_assessment_fff_2", "annual_income_fff_1",
        "annual_income_fff_2", "dsa_code", "credit_limit_consent", "nationality_add",
        "postal_code_other" // Because residency_status_a_1 is "CT"
      ],
      modifyVisibility: ["residential_address_consent", "block", "street_name"]
    };

    const result = Rules_ld_1(mockProps, mockState);

    expect(rulesUtils).toHaveBeenCalledWith(mockProps, expectedValidationObj);
    expect(result).toEqual(rulesUtils(mockProps, expectedValidationObj));
  });
});





import { render,cleanup,screen } from "@testing-library/react";

import { mount, shallow, ShallowWrapper } from "enzyme";

import configureStore from "redux-mock-store";
import thunk from "redux-thunk";
import { useDispatch, useSelector } from "react-redux";
import storeMockData from './../../utils/mock/store-spec.json';
import Dashboard from "./dashboard";
import React from "react";
import { useNavigate } from "react-router-dom";

jest.autoMockOff();
jest.mock("axios", () => ({
  __esModule: true,
}));
jest.mock("@lottiefiles/react-lottie-player", () => ({
  __esModule: true,
}));

const middlewares = [thunk];
const mockStore = configureStore(middlewares);
let store: any;


beforeEach(() => {
  global.scrollTo = jest.fn();
  store = mockStore(storeMockData);
});
afterEach(() => {
  jest.resetAllMocks();
});
afterAll(() => {
  cleanup();
  jest.clearAllMocks();
});


jest.mock('react-redux',()=>({
  useDispatch:jest.fn(),
  useSelector:jest.fn(),
}));

jest.mock('react-router-dom',()=>({
  useNavigate:jest.fn(),
  useLocation:jest.fn(),
}));


describe("Dashboard Testing useLayoufEffect", () => {
  let mockDispatch:jest.Mock;
  let mockNavigate:jest.Mock;;
  const mockHeaderHeight={current:{offsetHeight:50}};

  beforeEach(()=>{
    jest.clearAllMocks();
    mockDispatch=jest.fn();
    mockNavigate=jest.fn();

    jest.spyOn(React,'useState')
      .mockImplementationOnce(()=>[false,jest.fn()])
      .mockImplementationOnce(()=>[167,jest.fn()])
      .mockImplementationOnce(()=>[false,jest.fn()])
      .mockImplementationOnce(()=>[false,jest.fn()])
      .mockImplementationOnce(()=>[0,jest.fn()])
      .mockImplementationOnce(()=>[false,jest.fn()])
      .mockImplementationOnce(()=>[false,jest.fn()]);  

    (useDispatch as jest.Mock).mockReturnValue(mockDispatch);
    (useNavigate as jest.Mock).mockReturnValue(mockNavigate);
    (useSelector as jest.Mock).mockClear();

    (useSelector as jest.Mock).mockImplementation((selectorFn)=>{
      if (selectorFn.toString().includes('state.stages.stages')){
          return [{
            "stageId": "ssf-1",
            "stageInfo": {
              "application": {
                "source_system_name": 3
              }
            }
          }];
      }
      return false;
    });

      jest.spyOn(React,'useRef').mockReturnValueOnce(mockHeaderHeight);
  });

  it('should dispatch getClientInfo and navigate on success',async()=>{
    const mockResponse={data:'mockResponseData'};
    mockDispatch.mockImplementation((action:any)=>{
      if(typeof action==='function'){
        return Promise.resolve(mockResponse);
      }
      return action;
    });
    render(<Dashboard />);
   expect(mockDispatch).toHaveBeenCalledWith(expect.any(Function));
   await Promise.resolve();
  expect(mockNavigate).toHaveBeenCalledWith('sg/super-short-form'); 
});
});
