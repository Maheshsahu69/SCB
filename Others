  const isSafari = /^((?!chrome|andriod).)*safari/i.test(navigator.userAgent);
          /* istanbul ignore else */
      Iif (isSafari) {
        blob = new Blob([response.data], { type: "application/pdf" });
      }
      const dataURL = window.URL.createObjectURL(blob);
      lin.href = dataURL;
      if (isSafari) {
        lin.download = pdfName.endsWith('.pdf') ? pdfName : `${pdfName}.pdf`;
        document.body.appendChild(lin);
        lin.click();
        document.body.removeChild(lin);
      } else {
        lin.download = pdfName;
        document.body.appendChild(lin);
        lin.click();
        document.body.removeChild(lin);
      }
    });
  }









import { render, screen, fireEvent } from "@testing-library/react";
import OnboardingBeforeStart from "./onboarding-before-start";

describe("OnboardingBeforeStart - Safari and Non-Safari Handling", () => {
  let originalUserAgent: string;
  let originalCreateElement: typeof document.createElement;
  let mockCreateObjectURL: jest.Mock;

  beforeEach(() => {
    // Save the original userAgent and createElement to restore later
    originalUserAgent = window.navigator.userAgent;
    originalCreateElement = document.createElement;

    mockCreateObjectURL = jest.fn().mockReturnValue("mock-url");
    global.URL.createObjectURL = mockCreateObjectURL;

    jest.clearAllMocks();
  });

  afterEach(() => {
    // Restore the original userAgent and createElement
    Object.defineProperty(window.navigator, "userAgent", {
      value: originalUserAgent,
      configurable: true,
    });
    document.createElement = originalCreateElement;
  });

  it("should handle Safari browser logic", async () => {
    // Mock Safari userAgent
    Object.defineProperty(window.navigator, "userAgent", {
      value: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0 Safari/605.1.15",
      configurable: true,
    });

    // Mock the `createElement` function
    const mockLink = {
      click: jest.fn(),
      set href(value: string) {
        this.hrefValue = value;
      },
      get href() {
        return this.hrefValue;
      },
      set download(value: string) {
        this.downloadValue = value;
      },
      get download() {
        return this.downloadValue;
      },
    };

    document.createElement = jest.fn((tagName: string) => {
      if (tagName === "a") return mockLink as unknown as HTMLElement;
      return originalCreateElement.call(document, tagName);
    });

    // Render the component and trigger the download logic
    render(<OnboardingBeforeStart isVisible={true} onScrollEnd={jest.fn()} stageID={1} nextPage={jest.fn()} />);

    const downloadButton = screen.getByText("Download");
    fireEvent.click(downloadButton);

    // Assert Safari-specific behavior
    expect(mockCreateObjectURL).toHaveBeenCalled(); // Ensure createObjectURL is used
    expect(mockLink.click).toHaveBeenCalled(); // Ensure the link is clicked
    expect(mockLink.download).toBeTruthy(); // Ensure the download attribute is set
  });

  it("should handle non-Safari browser logic", async () => {
    // Mock non-Safari userAgent (e.g., Chrome)
    Object.defineProperty(window.navigator, "userAgent", {
      value: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36",
      configurable: true,
    });

    // Mock the `createElement` function
    const mockLink = {
      click: jest.fn(),
      set href(value: string) {
        this.hrefValue = value;
      },
      get href() {
        return this.hrefValue;
      },
      set download(value: string) {
        this.downloadValue = value;
      },
      get download() {
        return this.downloadValue;
      },
    };

    document.createElement = jest.fn((tagName: string) => {
      if (tagName === "a") return mockLink as unknown as HTMLElement;
      return originalCreateElement.call(document, tagName);
    });

    // Render the component and trigger the download logic
    render(<OnboardingBeforeStart isVisible={true} onScrollEnd={jest.fn()} stageID={1} nextPage={jest.fn()} />);

    const downloadButton = screen.getByText("Download");
    fireEvent.click(downloadButton);

    // Assert non-Safari behavior
    expect(mockCreateObjectURL).toHaveBeenCalled(); // Ensure createObjectURL is used
    expect(mockLink.click).toHaveBeenCalled(); // Ensure the link is clicked
    expect(mockLink.download).toBeTruthy(); // Ensure the download attribute is set
  });
});






import { render, screen, fireEvent } from "@testing-library/react";
import OnboardingBeforeStart from "./onboarding-before-start";

describe("OnboardingBeforeStart - Safari and Non-Safari Handling", () => {
  let originalUserAgent: string;
  let mockCreateObjectURL: jest.Mock;

  beforeEach(() => {
    // Save the original userAgent to restore later
    originalUserAgent = window.navigator.userAgent;
    mockCreateObjectURL = jest.fn().mockReturnValue("mock-url");
    global.URL.createObjectURL = mockCreateObjectURL;
    jest.clearAllMocks();
  });

  afterEach(() => {
    // Restore the original userAgent
    Object.defineProperty(window.navigator, "userAgent", {
      value: originalUserAgent,
      configurable: true,
    });
  });

  it("should handle Safari browser logic", async () => {
    // Mock Safari userAgent
    Object.defineProperty(window.navigator, "userAgent", {
      value: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0 Safari/605.1.15",
      configurable: true,
    });

    const mockLinkClick = jest.fn();
    document.createElement = jest.fn().mockImplementation((tagName) => {
      if (tagName === "a") {
        return {
          click: mockLinkClick,
          set href(value) {
            this.hrefValue = value;
          },
          get href() {
            return this.hrefValue;
          },
          set download(value) {
            this.downloadValue = value;
          },
          get download() {
            return this.downloadValue;
          },
        };
      }
    });

    // Render the component and trigger the download logic
    render(<OnboardingBeforeStart isVisible={true} onScrollEnd={jest.fn()} stageID={1} nextPage={jest.fn()} />);

    const downloadButton = screen.getByText("Download");
    fireEvent.click(downloadButton);

    // Assert Safari-specific behavior
    expect(mockCreateObjectURL).toHaveBeenCalled(); // Ensure createObjectURL is used
    expect(mockLinkClick).toHaveBeenCalled(); // Ensure the link is clicked
    expect(document.createElement).toHaveBeenCalledWith("a");
  });

  it("should handle non-Safari browser logic", async () => {
    // Mock non-Safari userAgent (e.g., Chrome)
    Object.defineProperty(window.navigator, "userAgent", {
      value: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36",
      configurable: true,
    });

    const mockLinkClick = jest.fn();
    document.createElement = jest.fn().mockImplementation((tagName) => {
      if (tagName === "a") {
        return {
          click: mockLinkClick,
          set href(value) {
            this.hrefValue = value;
          },
          get href() {
            return this.hrefValue;
          },
          set download(value) {
            this.downloadValue = value;
          },
          get download() {
            return this.downloadValue;
          },
        };
      }
    });

    // Render the component and trigger the download logic
    render(<OnboardingBeforeStart isVisible={true} onScrollEnd={jest.fn()} stageID={1} nextPage={jest.fn()} />);

    const downloadButton = screen.getByText("Download");
    fireEvent.click(downloadButton);

    // Assert non-Safari behavior
    expect(mockCreateObjectURL).toHaveBeenCalled(); // Ensure createObjectURL is used
    expect(mockLinkClick).toHaveBeenCalled(); // Ensure the link is clicked
    expect(document.createElement).toHaveBeenCalledWith("a");
  });
});
