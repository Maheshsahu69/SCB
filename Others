/* eslint-disable @typescript-eslint/no-unused-expressions */
import { cleanup } from "@testing-library/react";
import loader, { loaderAction } from "../utils/store/loader-slice";
import { getTokenChno, getUrl } from "../utils/common/change.utils";
import { ValueUpdateAction } from "../utils/store/value-update-slice";
import { dispatchLoader, isFormUpdate, technicalError,sortByAscendingOrder,sortingList, getProductInfo, setReferralCode, AppDispatch, getMyinfoTokens, setAggregator, dispatchCtaLoader, getProductCategory, defaultError, thankYouPage, offerData, submitBasicDataDocument, creditToTrust, channelReference, submitBasicDataMyInfo, submitBasicData, dispatchAuth, getCasaBannerData, getLovData, getClientInfo, formConfig, lovRequests,} from './common-service';
import { store } from "../utils/store/store";
import axios from "axios";
import { ProductModel } from "../utils/model/common-model";
import generatePayload from "./payload";
import {useSelector } from "react-redux";
import { urlParamAction } from "../utils/store/urlparam-slice";
import { errorAction } from "../utils/store/error-slice";


jest.autoMockOff();
jest.mock("axios",()=>({
  request:jest.fn(),
  get:jest.fn(),
  post:jest.fn()
}));
jest.mock("react-redux", () => ({
  useDispatch: jest.fn(),
  useSelector: jest.fn(),
}));
const mockedAxios = axios as jest.Mocked<typeof axios>;
afterEach(() => {
  cleanup();
  jest.resetAllMocks();
});
afterAll(() => {
  jest.clearAllMocks();
});
jest.mock('../utils/common/change.utils', () => ({
  authenticateType: jest.fn(),
  getUrl:{
    getJourneyType:jest.fn(),
    getParameterByName:jest.fn(),
    getProductInfo:jest.fn()
  },
  filterDisableFields:jest.fn(),
  getTokenChno:jest.fn()
}));

// jest.mock('./payload.ts', () => ({
//   generatePayload:{
//     formConfigPayload:jest.fn(),
//   },
 
// }));
const response = {
  "response": {
    "status": "error",
    "statusText": "no response",
  }
}

const sorting_list = {
  "application_reference": "HK20231204000003",
  "channel_reference": "04R0405987830122023",
  "stage": {
    "stage_id": "BD",
    "page_id": "bd-4"
  }
}

const sorted_data = {
  "application": {
    "application_reference": "HK20231204000003",
    "channel_reference": "04R0405987830122023",
    "stage": {
      "stage_id": "BD",
      "page_id": "bd-4"
    }
  },
  "applicants": [
    {
      "place_of_birth": "CN",
      "nationality": "HKG",
      "gender": "M",
      "marital_status": "M",
      "source_of_fund": "06",
      "work_type_2": "D",
      "nature_of_employer": "RS32-15",
      "indicative_income": "76587697"
    }
  ]
};
// jest.mock("./common-service", () => ({
//   getProductInfo: jest.fn(),
//   dispatchLoader:jest.fn(),
//   isFormUpdate:jest.fn(),
//   technicalError:jest.fn(),
//   sortByAscendingOrder:jest.fn(),
//   sortingList:jest.fn(),
// }));
describe("Common services", () => {
  const mockDispatch = jest.fn();
  const mockedChannelRefNo="testref";
  const mockStagePayloadData = {key:"value",products:[{product_type:"CC"}]};
  let dispatch:jest.MockedFunction<AppDispatch>;
  beforeEach(()=>{
    dispatch=jest.fn();
    jest.clearAllMocks();
  });
afterEach(()=>{
  jest.clearAllMocks();
})

  test('should return the product when conditions are met', () => {
  });
    test('dispatchLoader Method', () => {
      expect(dispatchLoader(true)).not.toBeNull();
      expect(loaderAction.getState(loader)).not.toBeNull();
    });
    test('isFormUpdate Method', () => {
      expect(isFormUpdate(true)).not.toBeNull();
      const mocked = store.dispatch(ValueUpdateAction.getValueUpdate(true));
      const isFormUpdatePayload = { "payload": true, "type": "valueUpdate/getValueUpdate" };
      expect(mocked).toEqual(isFormUpdatePayload);
    });
    test('technicalError Method', () => {
      // let data = {"status_code":404}
      expect(technicalError(response)).not.toBeNull();
      // expect(technicalError(data)).toEqual(response.response);
    });
    test('sortByAscendingOrder Method', () => {
      expect(sortByAscendingOrder(sorted_data)).not.toBeNull();
    });
    test('sortingList Method', () => {
      expect(sortingList(sorting_list, "object")).toEqual(sorting_list);
    });
    test('reder test referralcode',async () => {
      (getUrl.getParameterByName as jest.Mock).mockReturnValue("test");
      await setReferralCode()(dispatch);
      expect(dispatch).toHaveBeenCalled();
    });
    test('render test referralcode w',async () => {
      (getUrl.getParameterByName as jest.Mock).mockReturnValue((selector:any)=>{
        if(selector.toString().includes('aggregator_type'))
        return "test"
        if(selector.toString().includes('referId'))
        return undefined
        if(selector.toString().includes('refer'))
        return undefined
        });
      await setReferralCode()(dispatch);
      expect(dispatch).toHaveBeenCalled();
    });
    test('render test setAggregator', () => {
      (getUrl.getParameterByName as jest.Mock).mockReturnValue("test");
      expect(setAggregator().ext_source).toBe("test");
    });

    test('render test dispatchCtaLoader',async () => {
      (getUrl.getParameterByName as jest.Mock).mockReturnValue("test");
        await dispatchCtaLoader(true)(dispatch);
      expect(dispatch).toHaveBeenCalled();
    });
    test('render test dispatchLoader',async () => {
      (getUrl.getParameterByName as jest.Mock).mockReturnValue("test");
        await dispatchLoader(true)(dispatch);
      expect(dispatch).toHaveBeenCalled();
    });
    test('render test erro',async () => {
      (getUrl.getParameterByName as jest.Mock).mockReturnValue("test");
      await defaultError()(dispatch);
      expect(dispatch).toHaveBeenCalled();
    });
    test('render test getProductCategory', () => {
      getProductCategory([{product_category:"PL"},{product_category:"PL"}]);
      getProductCategory([{product_category:"CA"},{product_category:"CA"}]);
      getProductCategory([{product_category:"SA"},{product_category:"SA"}]);
      getProductCategory([{product_category:"CA"},{product_category:"CA"}]);
      expect(getProductCategory([{product_category:"CC"}])).toBe("CC");
      expect(getProductCategory([{product_category:"CA"}])).toBe("CA");
      expect(getProductCategory([{product_category:"PL"},{product_category:"SA"},{product_category:"CA"},{product_category:"CC"},{product_category:"PL"},{product_category:"CA"}])).toEqual("CC");
    });

    test('render test thankYouPage',async () => {
      
     const mockresponse={data:{success:true}};
     mockedAxios.request.mockResolvedValue(()=>({request:mockresponse}));
      await thankYouPage(mockStagePayloadData,mockedChannelRefNo,mockDispatch);
     expect(mockedAxios.request).toHaveBeenCalled();
    });
    test('render test offerData',async () => {
      
      const mockresponse={data:{success:true}};
      mockedAxios.request.mockResolvedValue(()=>({request:mockresponse}));
       await offerData(mockStagePayloadData,mockedChannelRefNo,mockDispatch);
      expect(mockedAxios.request).toHaveBeenCalled();
     });
     test('render test submitBasicDataDocument',async () => {
      
      const mockresponse={data:{success:true}};
      mockedAxios.request.mockResolvedValue(()=>({request:mockresponse}));
       await submitBasicDataDocument(mockStagePayloadData,mockedChannelRefNo,mockDispatch);
      expect(mockedAxios.request).toHaveBeenCalled();
     });
     test('render test creditToTrust',async () => {
      
      const mockresponse={data:{success:true}};
      mockedAxios.request.mockResolvedValue(()=>({request:mockresponse}));
       await creditToTrust(mockStagePayloadData,mockedChannelRefNo,mockDispatch);
      expect(mockedAxios.request).toHaveBeenCalled();
     });
     test('render test channelReference',async () => {
      const mockresponse={data:{success:true}};
      mockedAxios.request.mockResolvedValue(()=>({request:mockresponse}));
       await channelReference(mockStagePayloadData,mockedChannelRefNo,mockDispatch);
      expect(mockedAxios.request).toHaveBeenCalled();
     });
     test('render test dispatch auth',async () => {
       await dispatchAuth(true)(dispatch);
      expect(dispatch).toHaveBeenCalled();
     });
     test('render test isFormUpdate',async () => {
      await isFormUpdate(true)(dispatch);
     expect(dispatch).toHaveBeenCalled();
    });
     test('render test technicalError',() => {
     
     expect(technicalError({"response":{'status-code':"test"}})).toEqual({"response": {"status": undefined, "statusText": "no response"}});
    });
     test('render test submitBasicDataMyInfo',async () => {
      // (useSelector as jest.Mock).mockImplementation((SelectorFn)=>{
      //   // if(SelectorFn.toString().includes("state.stages.stages"))
      //    return [{
      //       stageId:'bd-1',
      //       stageInfo:{
      //           applicants:{
      //               annual_income_a_1:"100"
      //           },
      //           products:[{product_category:"CC"}]
      //       }
          
      //   }];
      // });
      (getTokenChno as jest.Mock).mockReturnValue({channelRefNo:"123"});
      (getUrl.getProductInfo as jest.Mock).mockReturnValue([{product_type: 'mockType'}]);
      const mockresponse={data:{success:true}};
      mockedAxios.request.mockResolvedValue(()=>({request:mockresponse}));
       await submitBasicDataMyInfo(mockStagePayloadData,mockDispatch);
      expect(mockedAxios.request).toHaveBeenCalled();
     });
     test('render test submitBasicData',async () => {
      (getTokenChno as jest.Mock).mockReturnValue({channelRefNo:"123"});
      (getUrl.getProductInfo as jest.Mock).mockReturnValue([{product_type: 'mockType'}]);
      const mockresponse={data:{success:true}};
      mockedAxios.request.mockResolvedValue(()=>({request:mockresponse}));
       await submitBasicData(mockStagePayloadData,mockedChannelRefNo,mockDispatch);
      expect(mockedAxios.request).toHaveBeenCalled();
     });

     test('render test getCasaBannerData',async () => {
   
      const mockresponse={data:{success:true}};
      mockedAxios.get.mockResolvedValue(()=>({request:mockresponse}));
       await getCasaBannerData();
      expect(mockedAxios.get).not.toHaveBeenCalled();
     });
     test('render test getlovrequest',async () => {
   
      const mockresponse={data:{success:true}};
      mockedAxios.get.mockResolvedValue(()=>({request:mockresponse}));
      let prop1 ={fieldmetadata:{data:{stages:[]}}};
       await lovRequests(prop1,'ssf-1');
      expect(mockedAxios.get).not.toHaveBeenCalled();
     });

     test('render test getCasaBannerData ef',async () => {
   
      const mockresponse={data:{success:true}};
      mockedAxios.get.mockResolvedValue(()=>({request:mockresponse}));
       await getLovData("field");
      expect(mockedAxios.get).not.toHaveBeenCalled();
     });
     test('render test clientinfo ef',async () => {
   
      const mockresponse={data:{success:true}};
      mockedAxios.get.mockResolvedValue(()=>({request:mockresponse}));
       await getClientInfo();
      expect(mockedAxios.get).not.toHaveBeenCalled();
     });
     test('render test formconfig',async () => {
      (getUrl.getProductInfo as jest.Mock).mockResolvedValue(()=>[{product_type:"CC"}]);
      (getUrl.getParameterByName as jest.Mock).mockResolvedValue("manual");
      // (generatePayload.formConfigPayload as jest.Mock).mockResolvedValue(()=>({stage:{
      //   stage_id:"",
      //   page_id:"ssf-1",
      // }}));
      const mockresponse={data:{success:true,status:{"status-code":"200"}}};
      mockedAxios.post.mockResolvedValue(()=>({request:mockresponse}));
       await formConfig("manual");
      expect(mockedAxios.post).not.toHaveBeenCalled();
     });

  });


