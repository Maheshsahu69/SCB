import React, { useState } from "react";
import "../documentUploadMain/document-upload-main-scr.scss";
import "./document-type-dynamic.scss";
import ColorIdentityProof from "../colourIdentityProof/colour-Identity-Proof";
import DocumentUploadSRC2 from "../document-upload-scr2/document-upload-scr2";
const DocumentTypeDynamic: React.FC<any> = ({
  changeIconColorIdentityProof,
  // openUploadHKdialog,
  docCategory,
  success,
  docCategory2,
  title,
  document_list,
  setChangeIconIncomeProof,
  changeIconIncomeProof,
  //---------------------------------------
  // showIncomeProof,
  // setShowIncomeProof,
  goBack,
  setGoBack,
  showQRCodePage,
  setShowQRCodePage,
  changeIcon,
  showUploadFileSuccess,
  setShowUploadFileSuccess,
  callQRCodeAPI,
  HKIDVersion,
  HKIDVersionValue,
  setHKIDVersion,
  setHKIDVersionValue,
  setShowContinueBtn,
  //.......................................................
  setDocumentCount,
  documentCount,
  setSucsess,
  changeSuccessState,
  channel_reference,
  HKIDQRCodeData,
  showContinueBtn,
  setDocumentData,
  setZolozDocumentData

}) => {

  const [selectedSection, setSelectedSection] = useState([]);
  const [showIncomeProof, setShowIncomeProof] = useState("");


  console.log("selectedSection:", selectedSection, "showIncomeProof:", showIncomeProof);

  const openUploadHKdialog = (title: any, item:any) => {
    setShowIncomeProof(title);
    setSelectedSection(item);
    // setShowContinueBtn(true);
    // alert()
  };
  return (
    <div className="row-start">
      <div className="doc-select-box">
        {document_list?.map((item: any) => {
          console.log("-----", item.document_category);
          // if (item?.document_category === "Colour Identity Proof") {
            return (
              <div
                id="upload_fieldset_{{docCategory.document_category_code}}"
                className={
                  changeIconColorIdentityProof
                    ? "form-field doc-select-box-child"
                    : "form-field-checked doc-select-box-child"
                }
              >
                <p
                 role="button"
                  title={title}
                  className={
                    changeIconColorIdentityProof ? "doc-add" : "doc-checked"
                  }
                  onClick={() => openUploadHKdialog(item?.document_category, item)} //item?.document_category
                  id="upload_fieldset_{{docCategory.document_category_code}}"
                ></p>
                <p
                  className="doc-field-name"
                  id="upload_fieldset_{{docCategory.document_category_code}}"
                >
                  {item?.document_category}
                </p>
              </div>
            );
          // } else if (item?.document_category === "Income Proof") {
            // return (
            //   <div
            //     className={
            //       changeIconIncomeProof
            //         ? "form-field doc-select-box-child"
            //         : "form-field-checked doc-select-box-child"
            //     }
            //   >
            //     <p
            //       role="button"
            //       className={changeIconIncomeProof ? "doc-add" : "doc-checked"}
            //       title="Income Proof"
            //       onClick={() => openUploadHKdialog("Income Proof")}
            //     ></p>
            //     <p className="doc-field-name">{docCategory2}</p>
            //   </div>
            // );
          // }
        })}
    {showIncomeProof === "Colour Identity Proof" && (
    <ColorIdentityProof
      showIncomeProof={showIncomeProof}
      // setShowIncomeProof={setShowIncomeProof}
      goBack={goBack}
      setGoBack={setGoBack}
      showQRCodePage={showQRCodePage}
      setShowQRCodePage={setShowQRCodePage}
      changeIconColorIdentityProof={changeIconColorIdentityProof}
      setChangeIconColorIdentityProof={changeIcon}
      showUploadFileSuccess={showUploadFileSuccess}
      setShowUploadFileSuccess={setShowUploadFileSuccess}
      callQRCodeAPI={callQRCodeAPI}
      HKIDVersion={HKIDVersion}
      HKIDVersionValue={HKIDVersionValue}
      setHKIDVersion={setHKIDVersion}
      setHKIDVersionValue={setHKIDVersionValue}
      setShowContinueBtn={setShowContinueBtn}
     />
  )} 

{showIncomeProof === "Income Proof" && (
          <DocumentUploadSRC2
            showIncomeProof={showIncomeProof}
            // setShowIncomeProof={setShowIncomeProof}
            setDocumentCount={setDocumentCount}
            documentCount={documentCount}
            success={success}
            setSucsess={setSucsess}
            changeSuccessState={changeSuccessState}
            goBack={goBack}
            setGoBack={setGoBack}
            showQRCodePage={showQRCodePage}
            setShowQRCodePage={setShowQRCodePage}
            changeIconColorIdentityProof={changeIconColorIdentityProof}
            setChangeIconColorIdentityProof={changeIcon}
            showUploadFileSuccess={showUploadFileSuccess}
            setShowUploadFileSuccess={setShowUploadFileSuccess}
            channel_reference={channel_reference}
            HKIDQRCodeData={HKIDQRCodeData}
            HKIDVersion={HKIDVersion}
            HKIDVersionValue={HKIDVersionValue}
            setHKIDVersion={setHKIDVersion}
            setHKIDVersionValue={setHKIDVersionValue}
            showContinueBtn={showContinueBtn}
            setShowContinueBtn={setShowContinueBtn}
            setDocumentData={setDocumentData}
            setZolozDocumentData={setZolozDocumentData}
            setChangeIconIncomeProof={setChangeIconIncomeProof}
            changeIconIncomeProof={changeIconIncomeProof}
          />
        )}
      </div>
    </div>
  );
};

export default DocumentTypeDynamic;



import React, { useState } from "react";
import ColorIdentityProof from "../colourIdentityProof/colour-Identity-Proof";
import DocumentUploadSRC2 from "../document-upload-scr2/document-upload-scr2";

const DocumentTypeDynamic: React.FC<any> = ({
  document_list,
  changeIconColorIdentityProof,
  title,
  ...props
}) => {
  const [selectedSection, setSelectedSection] = useState(null);
  const [showIncomeProof, setShowIncomeProof] = useState("");

  const handleOpenDialog = (title: any, item: any) => {
    setShowIncomeProof(title);
    setSelectedSection(item);
  };

  const componentsMap = {
    "Colour Identity Proof": ColorIdentityProof,
    "Income Proof": DocumentUploadSRC2,
  };

  const SelectedComponent = componentsMap[showIncomeProof];

  return (
    <div className="row-start">
      {selectedSection === null ? (
        <div className="doc-select-box">
          {document_list?.map((item: any) => (
            <div
              key={item.document_category}
              className={
                changeIconColorIdentityProof
                  ? "form-field doc-select-box-child"
                  : "form-field-checked doc-select-box-child"
              }
            >
              <p
                role="button"
                title={title}
                className={
                  changeIconColorIdentityProof ? "doc-add" : "doc-checked"
                }
                onClick={() => handleOpenDialog(item.document_category, item)}
              ></p>
              <p className="doc-field-name">{item.document_category}</p>
            </div>
          ))}
        </div>
      ) : (
        SelectedComponent && (
          <SelectedComponent
            showIncomeProof={showIncomeProof}
            {...props}
          />
        )
      )}
    </div>
  );
};

export default DocumentTypeDynamic;
