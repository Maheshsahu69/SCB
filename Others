 const handleSubmit = (event: React.FormEvent<EventTarget>): void => {
    setBackText("Continue");

    madatoryFieldSelector.forEach((data: string) => {
      if (userInputs[data]) {
        delete userInputs[data];
        delete userInputs["first_name"];
        delete userInputs["marketing_tooltip"];
        delete userInputs["estatement_tooltip"];
        // delete userInputs["res_building_estate_pt"]
      }
    });

    if (Object.keys(userInputs).length >= 0) {
      dispatch(
        userInputPayload(
          getStagePayload(stageSelector, applicantsSelector),
          stageSelector
        )
      );
      dispatch(
        userInputPayload(userInputSelector.applicants[0], stageSelector)
      );
      dispatch(stagesAction.resetNewAndOldFields());
      setShowSpinner(true);
      if (stageId === CONSTANTS.STAGE_NAMES.PD_1) {
        dispatch(stagesAction.setOtpShow(true));
        if (continueBtnSelector === true) {
          dispatch(stagesAction.setOtpShow(true));
        }
      } else if (stageId === CONSTANTS.STAGE_NAMES.BD_1A) {
        SetNextStageDetaisAfterSave(
          CONSTANTS.STAGE_NAMES.BD_1,
          CONSTANTS.STAGE_NAMES.BD_1A
        );
      } else if (stageId === CONSTANTS.STAGE_NAMES.BD_1) {
        SetNextStageDetaisAfterSave(
          CONSTANTS.STAGE_NAMES.AD_1,
          CONSTANTS.STAGE_NAMES.BD_1
        );
      } else if (stageId === CONSTANTS.STAGE_NAMES.AD_1) {
        SetNextStageDetaisAfterSave(
          CONSTANTS.STAGE_NAMES.AD_1A,
          CONSTANTS.STAGE_NAMES.AD_1
        );
      } else if (stageId === CONSTANTS.STAGE_NAMES.AD_1A) {
        if (
          applicantsSelector.work_type === "S105" ||
          applicantsSelector.work_type === "S107" ||
          applicantsSelector.work_type === "S108"
        ) {
          SetNextStageDetaisAfterSave(
            CONSTANTS.STAGE_NAMES.AD_6,
            CONSTANTS.STAGE_NAMES.AD_1A
          );
        } else {
          SetNextStageDetaisAfterSave(
            CONSTANTS.STAGE_NAMES.AD_2,
            CONSTANTS.STAGE_NAMES.AD_1A
          );
        }
      } else if (stageId === CONSTANTS.STAGE_NAMES.AD_2) {
        SetNextStageDetaisAfterSave(
          CONSTANTS.STAGE_NAMES.AD_3,
          CONSTANTS.STAGE_NAMES.AD_2
        );
      } else if (stageId === CONSTANTS.STAGE_NAMES.AD_3) {
        SetNextStageDetaisAfterSave(
          CONSTANTS.STAGE_NAMES.AD_6,
          CONSTANTS.STAGE_NAMES.AD_3
        );
      } else if (stageId === CONSTANTS.STAGE_NAMES.AD_6) {
        SetNextStageDetaisAfterSave(
          CONSTANTS.STAGE_NAMES.RP,
          CONSTANTS.STAGE_NAMES.AD_6
        );
      } else if (stageId === CONSTANTS.STAGE_NAMES.RP) {
        dispatch(stagesAction.updateStageId(CONSTANTS.STAGE_NAMES.ACD_1));
        setStageId(CONSTANTS.STAGE_NAMES.ACD_1);
        postAditionalData().then(async (res: any) => {
          if (res.status === 200) {
            let responseType = res.data.application.response_type.toUpperCase();
            let responseAction =
              res.data.application.response_action.toUpperCase();
            if (
              responseAction === "SUCCESS" ||
              responseType === "INFO" ||
              (responseType === "SOFT" && responseAction === "CONTINUE")
            ) {
              let stageData = JSON.parse(JSON.stringify(res.data));
              delete stageData.applicants;
              delete stageData.fieldmetadata;
              stageData.fieldMetaData = res.data.fieldmetadata;
              stageData.applicants = [res.data.applicants];
              dispatch(
                stagesAction.getStage({
                  id: CONSTANTS.STAGE_NAMES.ACD_1,
                  formConfig: stageData,
                })
              );
              dispatch(stagesAction.updateStageId(CONSTANTS.STAGE_NAMES.ACD_1));
              await getOffer(res.data).then(async (offerResponse: any) => {
                if (offerResponse.status === 200) {
                  let applicants = offerResponse.data.applicants;
                  let application = offerResponse.data.application;
                  let responseType =
                    offerResponse.data.application.response_type.toUpperCase();
                  let responseAction =
                    offerResponse.data.application.response_action.toUpperCase();

                  let channel_reference =
                    offerResponse.data.application.channel_reference;
                  let offer_status =
                    offerResponse.data.products[0].offer_details[0]
                      .offer_status;
                  if (
                    responseAction === "SUCCESS" ||
                    responseType === "INFO" ||
                    (responseType === "SOFT" && responseAction === "CONTINUE")
                  ) {
                    let formStageData = JSON.parse(
                      JSON.stringify(formConfigmetaData)
                    );
                    formStageData.applicants = applicants;
                    dispatch(
                      preApprovalAction.setFormConfigMetaData(formStageData)
                    );

                    let stageData = Object.assign(
                      {},
                      stageSelector[0].stageInfo
                    );
                    delete stageData.applicants;
                    delete stageData.fieldmetadata;
                    stageData.applicant_bureau_details =
                      offerResponse.data.applicant_bureau_details;
                    stageData.fieldMetaData = offerResponse.data.fieldmetadata;
                    stageData.applicants = [offerResponse.data.applicants];
                    stageData.products = offerResponse.data.products;
                    stageData.applicant_documents =
                      offerResponse.data.applicant_documents;
                    dispatch(
                      stagesAction.getStage({
                        id: CONSTANTS.STAGE_NAMES.ACD_3,
                        formConfig: stageData,
                      })
                    );
                    if (offer_status === "1001" || offer_status === "1003") {
                      if (
                        offerResponse.data.products[0].product_category === "PL"
                      ) {
                        dispatch(
                          stagesAction.updateStageId(
                            CONSTANTS.STAGE_NAMES.ACD_2
                          )
                        );
                        let newOfferData = offerResponse.data;
                        await getOffer2(newOfferData).then(
                          async (offerRes: any) => {
                            if (offerRes.status === 200) {
                              let responseType =
                                offerRes.data.application.response_type.toUpperCase();
                              let responseAction =
                                offerRes.data.application.response_action.toUpperCase();
                              if (
                                responseAction === "SUCCESS" ||
                                responseType === "INFO" ||
                                (responseType === "SOFT" &&
                                  responseAction === "CONTINUE")
                              ) {
                                let stageData = Object.assign(
                                  {},
                                  stageSelector[0].stageInfo
                                );
                                delete stageData.applicants;
                                delete stageData.fieldmetadata;
                                stageData.applicant_bureau_details =
                                  offerRes.data.applicant_bureau_details;
                                stageData.fieldMetaData =
                                  offerRes.data.fieldmetadata;
                                stageData.applicants = [
                                  offerRes.data.applicants,
                                ];
                                stageData.products = offerRes.data.products;
                                stageData.applicant_documents =
                                  offerRes.data.applicant_documents;
                                dispatch(
                                  stagesAction.getStage({
                                    id: CONSTANTS.STAGE_NAMES.ACD_3,
                                    formConfig: stageData,
                                  })
                                );
                                setShowSpinner(false);
                                dispatch(
                                  preApprovalAction.setCurrentStage("LD")
                                );
                                dispatch(
                                  stagesAction.updateStageId(
                                    CONSTANTS.STAGE_NAMES.ACD_3
                                  )
                                );
                              } else {
                                HardStop(offerRes);
                              }
                            }
                          }
                        );
                      } else {
                        const pdfPreviewRes = await postPdfPreview(
                          channel_reference
                        );
                        if (
                          pdfPreviewRes.status >= 200 &&
                          pdfPreviewRes.status < 300
                        ) {
                          setShowSpinner(false);
                          dispatch(preApprovalAction.setCurrentStage("FFD"));
                        } else {
                          setShowSpinner(false);
                          dispatch(preApprovalAction.setCurrentStage("FFD"));
                        }
                      }
                    } else if (
                      (offer_status === "1004" || offer_status === "1002") &&
                      offerResponse.data.products[0].product_category ===
                        "PL" &&
                      offerResponse.data.products[0].offer_details[0]
                        .bestOffer === "Y"
                    ) {
                      dispatch(
                        stagesAction.updateStageId(CONSTANTS.STAGE_NAMES.ACD_2)
                      );
                      let newOfferData = offerResponse.data;
                      await getOffer2(newOfferData).then(
                        async (offerRes: any) => {
                          if (offerRes.status === 200) {
                            let responseType =
                              offerRes.data.application.response_type.toUpperCase();
                            let responseAction =
                              offerRes.data.application.response_action.toUpperCase();
                            if (
                              responseAction === "SUCCESS" ||
                              responseType === "INFO" ||
                              (responseType === "SOFT" &&
                                responseAction === "CONTINUE")
                            ) {
                              let stageData = Object.assign(
                                {},
                                stageSelector[0].stageInfo
                              );
                              delete stageData.applicants;
                              delete stageData.fieldmetadata;
                              stageData.applicant_bureau_details =
                                offerRes.data.applicant_bureau_details;
                              stageData.fieldMetaData =
                                offerRes.data.fieldmetadata;
                              stageData.applicants = [offerRes.data.applicants];
                              stageData.products = offerRes.data.products;
                              stageData.applicant_documents =
                                offerRes.data.applicant_documents;
                              dispatch(
                                stagesAction.getStage({
                                  id: CONSTANTS.STAGE_NAMES.ACD_3,
                                  formConfig: stageData,
                                })
                              );
                              setShowSpinner(false);
                              dispatch(preApprovalAction.setCurrentStage("LD"));
                              dispatch(
                                stagesAction.updateStageId(
                                  CONSTANTS.STAGE_NAMES.ACD_3
                                )
                              );
                            } else {
                              HardStop(offerRes);
                            }
                          }
                        }
                      );
                    } else if (
                      offer_status === "1004" &&
                      offerResponse.data.products[0].product_category ===
                        "PL" &&
                      offerResponse.data.products[0].offer_details[0]
                        .bestOffer !== "Y"
                    ) {
                      setShowSpinner(false);
                      dispatch(preApprovalAction.setCurrentStage("FFD"));
                    } else {
                      setShowSpinner(false);
                      dispatch(preApprovalAction.setCurrentStage("FFD"));
                    }
                  } else {
                    HardStop(offerResponse);
                  }
                }
              });
            } else {
              HardStop(res);
            }
          }
        });
      } else if (stageId === CONSTANTS.STAGE_NAMES.LD_1) {
        dispatch(stagesAction.updateStageId(CONSTANTS.STAGE_NAMES.FFD_1));
        setStageId(CONSTANTS.STAGE_NAMES.FFD_1);
        postSaveData().then(async (res: any) => {
          if (res.status === 200) {
            let responseType = res.data.application.response_type.toUpperCase();
            let responseAction =
              res.data.application.response_action.toUpperCase();
            if (
              responseAction === "SUCCESS" ||
              responseType === "INFO" ||
              (responseType === "SOFT" && responseAction === "CONTINUE")
            ) {
              setStageId(CONSTANTS.STAGE_NAMES.FFD_2);
              await postFulFilmentData(res.data).then(async (fulres: any) => {
                if (res.status >= 200 && res.status < 300) {
                  dispatch(
                    stagesAction.updateStageId(CONSTANTS.STAGE_NAMES.FFD_2)
                  );
                  let stageData = JSON.parse(
                    JSON.stringify(stageSelector[0].stageInfo)
                  );
                  stageData.applicants = [fulres.data.applicants];
                  stageData.application = fulres.data.application;
                  dispatch(
                    stagesAction.getStage({
                      id: CONSTANTS.STAGE_NAMES.FFD_2,
                      formConfig: stageData,
                    })
                  );
                  let responseType =
                    res.data.application.response_type.toUpperCase();
                  let responseAction =
                    res.data.application.response_action.toUpperCase();
                  if (
                    responseAction === "SUCCESS" ||
                    responseType === "INFO" ||
                    (responseType === "SOFT" && responseAction === "CONTINUE")
                  ) {
                    await postFulFilmentData(fulres.data).then(
                      async (res: any) => {
                        if (res.status >= 200 && res.status < 300) {
                          let responseType =
                            res.data.application.response_type.toUpperCase();
                          let responseAction =
                            res.data.application.response_action.toUpperCase();
                          if (
                            responseAction === "SUCCESS" ||
                            responseType === "INFO" ||
                            (responseType === "SOFT" &&
                              responseAction === "CONTINUE")
                          ) {
                            setShowSpinner(false);
                            let stageData = JSON.parse(
                              JSON.stringify(stageSelector[0].stageInfo)
                            );
                            stageData.applicants = [res.data.applicants];
                            stageData.application = res.data.application;
                            dispatch(
                              stagesAction.getStage({
                                id: CONSTANTS.STAGE_NAMES.FFD_2,
                                formConfig: stageData,
                              })
                            );
                            dispatch(preApprovalAction.setCurrentStage("FFD"));
                          } else {
                            HardStop(res);
                          }
                        }
                      }
                    );
                  } else {
                    HardStop(res);
                  }
                }
              });
            } else {
              HardStop(res);
            }
          }
        });
      } else if (stageId === CONSTANTS.STAGE_NAMES.AD_3) {
        if (continueBtnSelector) {
          dispatch(ibankEncrypt(userInputSelector))
            .then(() => {
              submitSuccess();
            })
            .catch((error: AxiosError) => {
              dispatchError(error);
            });
        }
      } else {
        if (
          (resumeFlag.otpResume === true &&
            (continueBtnSelector === null || continueBtnSelector === true)) ||
          continueBtnSelector === true
        ) {
          submitSuccess();
        }
      }
      pageScrollTop();
    } else {
      dispatch(
        fieldErrorAction.getFieldError({
          fieldName: userInputs,
        })
      );
      window.scroll(0, 0);
    }
    event.preventDefault();
  };
