import PreApprovalUtil from './PreApprovalUtil';
import { store } from '../../../utils/store/store';
import md5 from 'md5';
import { sha256 } from 'js-sha256';

jest.mock('../../../utils/store/store', () => ({
  store: {
    getState: jest.fn(),
  },
}));

jest.mock('md5', () => jest.fn());
jest.mock('js-sha256', () => ({
  sha256: jest.fn(),
}));

describe('PreApprovalUtil', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe('generateUUID', () => {
    it('should generate a valid UUID', () => {
      const uuid = PreApprovalUtil.generateUUID();
      expect(uuid).toBeDefined();
      expect(typeof uuid).toBe('string');
    });
  });

  describe('getSHA256Hash', () => {
    it('should return the SHA256 hash of the input', async () => {
      const input = 'test-input';
      const mockHash = new Uint8Array([1, 2, 3, 4]);
      jest.spyOn(window.crypto.subtle, 'digest').mockResolvedValueOnce(mockHash.buffer);

      const result = await PreApprovalUtil.getSHA256Hash(input);
      expect(result).toEqual('01020304');
      expect(window.crypto.subtle.digest).toHaveBeenCalledWith('SHA-256', new TextEncoder().encode(input));
    });
  });

  describe('stringToHash', () => {
    it('should convert a string to a numeric hash', () => {
      const result = PreApprovalUtil.stringToHash('test');
      expect(typeof result).toBe('number');
    });
  });

  describe('getFieldOnlyWithValue', () => {
    it('should return an array with "product_minimum"', () => {
      const result = PreApprovalUtil.getFieldOnlyWithValue();
      expect(result).toEqual(['product_minimum']);
    });
  });

  describe('getApplicantFields', () => {
    it('should return a list of applicant fields', () => {
      const result = PreApprovalUtil.getApplicantFields();
      expect(Array.isArray(result)).toBe(true);
      expect(result).toContain('last_name_a_1');
    });
  });

  describe('getApplicationFields', () => {
    it('should return a list of application fields', () => {
      const result = PreApprovalUtil.getApplicationFields();
      expect(Array.isArray(result)).toBe(true);
      expect(result).toContain('application_reference');
    });
  });

  describe('securityCallDesider', () => {
    it('should return a processed security call string', () => {
      store.getState.mockReturnValue({
        stages: {
          stages: [{ stageInfo: { applicants: { last_name_a_1: 'Doe' } } }],
        },
      });

      const result = PreApprovalUtil.securityCallDesider('bAuth', 'key', []);
      expect(result).toBeDefined();
    });
  });

  describe('generateSecMd', () => {
    it('should generate security metadata', () => {
      store.getState.mockReturnValue({
        stages: {
          stages: [{ stageInfo: { applicants: { last_name_a_1: 'Doe' } } }],
        },
      });

      const result = PreApprovalUtil.generateSecMd('bAuth', 'key', ['last_name_a_1'], { last_name_a_1: 'Doe' }, []);
      expect(result).toBeDefined();
    });
  });

  describe('getBAuth', () => {
    it('should generate BAuth hash', async () => {
      jest.spyOn(PreApprovalUtil, 'securityCallDesider').mockReturnValue('securityString');
      jest.spyOn(PreApprovalUtil, 'getSHA256Hash').mockResolvedValue('hashValue');

      const result = await PreApprovalUtil.getBAuth();
      expect(result).toEqual('hashValue');
    });
  });

  describe('getAckMetaData', () => {
    it('should return metadata for acknowledgment', () => {
      process.env.REACT_APP_XRTOB = 'testKey';
      md5.mockReturnValue('hashedValue');
      store.getState.mockReturnValue({
        auth: { sessionUid: 'sessionId' },
      });

      const result = PreApprovalUtil.getAckMetaData('channelReference');
      expect(result).toContain('hashedValue');
    });
  });

  describe('getFormConfigPayload', () => {
    it('should return a sorted payload', () => {
      store.getState.mockReturnValue({
        stages: {
          stages: [{ stageInfo: { applicants: [{}] } }],
          userInput: { applicants: [{}] },
        },
        lovDesc: { lovDesc: [] },
      });

      const result = PreApprovalUtil.getFormConfigPayload();
      expect(result).toBeDefined();
      expect(result).toHaveProperty('applicants');
    });
  });
});
