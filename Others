xport const stageFields = (
  stageSelector: Array<StageDetails>,
  stageId: string,
  employeeToggleSelector?: any,
  other?: string | undefined
) => {
  let stageFields: Array<StageFieldModel> = [];
  if (
    stageSelector && stageSelector.length>0 &&
    stageSelector[0].stageInfo &&
    stageSelector[0].stageInfo.fieldMetaData &&
    stageSelector[0].stageInfo.fieldMetaData.data.stages
  ) {
    let currentStage =
      stageId === CONSTANTS.STAGE_NAMES.LD_1 
        ? ["ad-11"]
        : [stageId];
    currentStage.forEach((name) => {
      const stageIndex = FindIndex(stageSelector[0].stageInfo, name);
      stageFields.push(
        stageSelector[0].stageInfo.fieldMetaData.data.stages[stageIndex]
      );
    });
  }
  let currentStageFields: any;
  if (stageFields) {
    let fieldsetGroup: Array<FieldSetGroupModel[]> = [];
    const groupObj = (response: StageFieldModel) => {
      return response?.fields?.reduce(
        (prev: Array<FieldSetGroupModel>, { field_set_name, ...items }) => {
          let id = prev.findIndex(
            (item: KeyWithAnyModel) => item.field_set_name === field_set_name
          );
          fieldGroupingFunc(id, prev, field_set_name, items);
          return prev;
        },
        []
      );
    };

    let filteredData: any =stageFields.length > 0 ? stageFields[0]?.fields?.filter((item:KeyWithAnyModel) => item.rwb_category===stageSelector[0].stageId) : [];

   
    let stageFieldData= JSON.parse(JSON.stringify(stageFields));
    /* istanbul ignore else */
  if( !Array.isArray(stageFieldData) && stageFieldData.length>0 ){
    stageFieldData[0].fields= filteredData;
  }

    stageFieldData.forEach((data: StageFieldModel) => {

      if (fieldsetGroup.length > 0) {
        fieldsetGroup[0].push(groupObj(data)[0]);
      } else {
        fieldsetGroup.push(groupObj(data));
      }
    });
    if (stageId === "bd-2") {
      currentStageFields = Rules_bd_2(
        fieldsetGroup,
        stageSelector[0].stageInfo.application
      );
    } else if (stageId === "bd-1") {
      currentStageFields = Rules_bd_1(
        fieldsetGroup,
        stageSelector?.[0]?.stageInfo?.fieldMetaData?.data?.stages?.[0]?.fields
      );
    }
    else if (stageId === "pd-1") {

      currentStageFields = Rules_bd_1(
        fieldsetGroup,
        stageSelector[0].stageInfo.fieldMetaData.data.stages[0].fields
      );
    }
    else if (stageId === "bd-1a") {

      currentStageFields = Rules_bd_1(
        fieldsetGroup,
        stageSelector[0].stageInfo.fieldMetaData.data.stages[0].fields
      );
    }
    else if (stageId === "bd-3") {
      currentStageFields = Rules_bd_3(
        fieldsetGroup,
        stageSelector[0].stageInfo.application
      );
    } else if (stageId === "bd-4") {
      currentStageFields = Rules_bd_4(
        fieldsetGroup,
        stageSelector[0].stageInfo.application,
        employeeToggleSelector
      );
    }
    else if (stageId === "ad-1") {
      currentStageFields = Rules_ad_1(
        fieldsetGroup,
        stageSelector[0].stageInfo.fieldMetaData.data.stages[0].fields
      );
    }
    else if (stageId === "ad-1a") {
      currentStageFields = Rules_ad_1(
        fieldsetGroup,
        stageSelector[0].stageInfo.fieldMetaData.data.stages[0].fields
      );
    }
    else if (stageId === "ad-2") {
      currentStageFields = Rules_ad_2(
        fieldsetGroup,
        stageSelector[0].stageInfo.fieldMetaData.data.stages[0].fields
      );
    } 
    else if (stageId === "ad-3") {
      currentStageFields = Rules_ad_2(
        fieldsetGroup,
        stageSelector[0].stageInfo.fieldMetaData.data.stages[0].fields
      );
    } 
    else if (stageId === "ad-6") {
      currentStageFields = Rules_ad_6(
        fieldsetGroup,
        stageSelector[0].stageInfo.fieldMetaData.data.stages[0].fields
      );
    } 
    else if (stageId === "ld-1") {
      currentStageFields = Rules_ad_2(
        fieldsetGroup,
        stageSelector[0].stageInfo.fieldMetaData.data.stages[0].fields
      );
    } 
    else {
      currentStageFields = RulesSSF(
        fieldsetGroup,
        stageSelector[0] && stageSelector[0].stageInfo.application,
      );
    }
  }
  return {
    fields: currentStageFields,
  };
};








import { stageFields } from './Fields.utils';
import { CONSTANTS } from '../../../utils/common/constants';
import { FindIndex } from '../../../utils/common/change.utils';
import Rules_bd_1 from '../../rules/rules_bd-1';
import Rules_bd_2 from '../../rules/rules_bd-2';
import RulesSSF from '../../rules/rules_ssf-1';
import Rules_ad_1 from '../../rules/rules_ad-1';
import Rules_ad_2 from '../../rules/rules_ad-2';
import Rules_ad_6 from '../../rules/rules_ad-6';
import Rules_bd_3 from '../../rules/rules_bd-3';
import Rules_bd_4 from '../../rules/rules_bd-4';

jest.mock('../../../utils/common/change.utils', () => ({
  FindIndex: jest.fn(),
}));

jest.mock('../../rules/rules_bd-1', () => jest.fn());
jest.mock('../../rules/rules_bd-2', () => jest.fn());
jest.mock('../../rules/rules_ssf-1', () => jest.fn());
jest.mock('../../rules/rules_ad-1', () => jest.fn());
jest.mock('../../rules/rules_ad-2', () => jest.fn());
jest.mock('../../rules/rules_ad-6', () => jest.fn());
jest.mock('../../rules/rules_bd-3', () => jest.fn());
jest.mock('../../rules/rules_bd-4', () => jest.fn());

describe('stageFields', () => {
  const mockStageSelector = [
    {
      stageInfo: {
        fieldMetaData: {
          data: {
            stages: [
              {
                fields: [
                  { field_set_name: 'group1', rwb_category: 'stage1', logical_field_name: 'field1' },
                  { field_set_name: 'group2', rwb_category: 'stage2', logical_field_name: 'field2' },
                ],
              },
            ],
          },
        },
        application: 'mock-application',
      },
      stageId: 'stage1',
    },
  ];

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('should return fields grouped and processed by Rules_bd_1 for stageId bd-1', () => {
    FindIndex.mockReturnValue(0);
    Rules_bd_1.mockReturnValue('mocked-rules-bd-1');

    const result = stageFields(mockStageSelector, 'bd-1');

    expect(FindIndex).toHaveBeenCalledWith(mockStageSelector[0].stageInfo, 'bd-1');
    expect(Rules_bd_1).toHaveBeenCalledWith(expect.any(Array), mockStageSelector[0].stageInfo.fieldMetaData.data.stages[0].fields);
    expect(result).toEqual({ fields: 'mocked-rules-bd-1' });
  });

  it('should return fields grouped and processed by Rules_bd_2 for stageId bd-2', () => {
    FindIndex.mockReturnValue(0);
    Rules_bd_2.mockReturnValue('mocked-rules-bd-2');

    const result = stageFields(mockStageSelector, 'bd-2');

    expect(FindIndex).toHaveBeenCalledWith(mockStageSelector[0].stageInfo, 'bd-2');
    expect(Rules_bd_2).toHaveBeenCalledWith(expect.any(Array), mockStageSelector[0].stageInfo.application);
    expect(result).toEqual({ fields: 'mocked-rules-bd-2' });
  });

  it('should filter fields by rwb_category and process default rules for unknown stageId', () => {
    FindIndex.mockReturnValue(0);
    RulesSSF.mockReturnValue('mocked-rules-ssf');

    const result = stageFields(mockStageSelector, 'unknown');

    expect(result).toEqual({ fields: 'mocked-rules-ssf' });
    expect(RulesSSF).toHaveBeenCalledWith(expect.any(Array), 'mock-application');
  });

  it('should handle empty stageSelector gracefully', () => {
    const result = stageFields([], 'bd-1');
    expect(result).toEqual({ fields: undefined });
  });

  it('should handle missing stageInfo gracefully', () => {
    const incompleteSelector = [{ stageInfo: null }];
    const result = stageFields(incompleteSelector, 'bd-1');
    expect(result).toEqual({ fields: undefined });
  });

  it('should handle grouping logic in groupObj correctly', () => {
    const mockStageSelectorWithFields = [
      {
        stageInfo: {
          fieldMetaData: {
            data: {
              stages: [
                {
                  fields: [
                    { field_set_name: 'group1', field_name: 'field1' },
                    { field_set_name: 'group1', field_name: 'field2' },
                    { field_set_name: 'group2', field_name: 'field3' },
                  ],
                },
              ],
            },
          },
          application: 'mock-application',
        },
        stageId: 'stage1',
      },
    ];

    FindIndex.mockReturnValue(0);
    RulesSSF.mockReturnValue('mocked-rules-ssf');

    const result = stageFields(mockStageSelectorWithFields, 'unknown');

    expect(result).toEqual({ fields: 'mocked-rules-ssf' });
    expect(RulesSSF).toHaveBeenCalled();
  });
});
