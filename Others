import React from "react";
import { render, screen, fireEvent, waitFor } from "@testing-library/react";
import { Provider } from "react-redux";
import configureStore from "redux-mock-store";
import thunk from "redux-thunk";
import Fields from "./fields";
import { userInputPayload } from "./fields.utils";

// Mock dependencies
jest.mock("../footer/footer", () => () => <div data-testid="footer" />);
jest.mock("../review-page/review-page", () => () => <div data-testid="review-page" />);
jest.mock("../../../shared/components/spinner/spinner", () => () => <div data-testid="spinner" />);
jest.mock("../../preApproval/commonComponents/fundDisbursement/fund-disbursement", () => () => (
  <div data-testid="fund-disbursement" />
));

// Mock Redux actions and services
jest.mock("./fields.utils", () => ({
  ...jest.requireActual("./fields.utils.ts"),
  getLovMissing: jest.fn(() => jest.fn()),
  stageFields: jest.fn(() => jest.fn()),
  getStagePayload: jest.fn(() => jest.fn()),
  stageSelectFields: jest.fn(() => jest.fn()),
  submitRequest: jest.fn(() => () => Promise.resolve({})),
  userInputPayload: jest.fn(() => () => Promise.resolve({})),
  assignUpdateUserInput: jest.fn(() => () => Promise.resolve({})),
}));
jest.mock("../../../services/track-events", () => ({
  triggerAdobeEvent: jest.fn(),
}));
jest.mock("../../../utils/common/change.utils.ts", () => ({
  ...jest.requireActual("../../../utils/common/change.utils.ts"),
  FindIndex: jest.fn(() => 0),
}));

// Configure mock store with thunk middleware
const mockStore = configureStore([thunk]);

describe("Fields Component", () => {
  let store: any;

  beforeEach(() => {
    store = mockStore({
      stages: {
        stages: [
          {
            stageId: "pd-1",
            stageInfo: {
              fieldMetaData: {
                data: {
                  stages: [
                    { id: "pd-1", name: "Personal Details" },
                    { id: "ad-1", name: "Address Details" },
                  ],
                },
              },
            },
          },
        ],
        userInput: {
          applicants: [
            {
              work_type: "S001", // Provide valid work_type
            },
          ],
        },
        parentChildFields: { selectFields: [], addSelectFields: [], deleteSelectFields: [] },
        conditionalFields: { newFields: {} },
        currentStage: "pd-1",
        journeyType: "type",
      },
      lov: {},
      urlParam: { resume: false },
      fielderror: { mandatoryFields: [], error: [] },
      valueUpdate: { value: false, changesUpdate: { changes: false } },
      error: { submit: false },
      continueBtnSlice: { continueEnable: false },
      preApproval: { currentStage: "pd-1", formConfigmetaData: {} },
    });

    jest.clearAllMocks();
  });

  it("renders the component and displays a form", () => {
    render(
      <Provider store={store}>
        <Fields />
      </Provider>
    );

    expect(screen.getByRole("form")).toBeInTheDocument();
    expect(screen.getByTestId("footer")).toBeInTheDocument();
  });

  it("renders the FundDisbursement component for `ld-1` stageId", () => {
    store = mockStore({
      ...store.getState(),
      stages: {
        ...store.getState().stages,
        stages: [{ stageId: "ld-1", stageInfo: {} }],
      },
    });

    render(
      <Provider store={store}>
        <Fields />
      </Provider>
    );

    expect(screen.getByTestId("fund-disbursement")).toBeInTheDocument();
  });

  it("renders the ReviewPage component for `rp` stageId", () => {
    store = mockStore({
      ...store.getState(),
      stages: {
        ...store.getState().stages,
        stages: [{ stageId: "rp", stageInfo: {} }],
      },
    });

    render(
      <Provider store={store}>
        <Fields />
      </Provider>
    );

    expect(screen.getByTestId("review-page")).toBeInTheDocument();
  });

  it("triggers submit when form is submitted", async () => {
    render(
      <Provider store={store}>
        <Fields />
      </Provider>
    );

    fireEvent.submit(screen.getByRole("form"));

    await waitFor(() => {
      expect(userInputPayload).toHaveBeenCalled();
    });
  });

  it("handles back button click", () => {
    render(
      <Provider store={store}>
        <Fields />
      </Provider>
    );

    const backButton = screen.getByTestId("footer");
    fireEvent.click(backButton);

    expect(screen.getByRole("form")).toBeInTheDocument();
  });
});


const roomFloorBlockValidation = (
    fieldProps: KeyWithAnyModel,
    childValue: string | number | null
  ) => {
    const { logical_field_name } = fieldProps;
 
    // Relationships between fields
    const relatedFields: any = {
      res_room_flat: ["res_block", "res_floor"],
      res_block: ["res_room_flat", "res_floor"],
      res_floor: ["res_room_flat", "res_block"],
    };
 
    // Get the current state of the applicants
    const applicants = userInputSelector.applicants[0];
 
    // Check if the field is updated
    if (childValue !== null && relatedFields[logical_field_name]) {
      const fieldsToRemove = relatedFields[logical_field_name];
      dispatch(fieldErrorAction.removeMandatoryFields(fieldsToRemove));
    }
  };
  const handleCallback = (
    fieldProps: KeyWithAnyModel,
    childData: string | number | null
  ) => {
    currentStageSection = fieldProps;
    if (
      madatoryFieldSelector &&
      madatoryFieldSelector.indexOf(fieldProps.logical_field_name) !== -1
    ) {
      if (stageId !== CONSTANTS.STAGE_NAMES.AD_2) {
        madatoryFieldSelector &&
          madatoryFieldSelector.map((fieldName) => {
            let childValue = userInputSelector.applicants[0][fieldName];
            stageId == CONSTANTS.STAGE_NAMES.BD_1 &&
              roomFloorBlockValidation(fieldProps, childValue);
            if (fieldName === fieldProps.logical_field_name) {
              setUserInputs((prevUser: KeyStringModel) => ({
                ...prevUser,
                // [fieldName]: childData,
                [fieldProps.logical_field_name]:
                  stageId === CONSTANTS.STAGE_NAMES.AD_1 ||
                  stageId === CONSTANTS.STAGE_NAMES.RP
                    ? (fieldName === "cb_declaration" ||
                        fieldName === "client_declaration_cert" ||
                        fieldName === "acknowledgement_cert") &&
                      (childData === "N" || childData === undefined)
                      ? undefined
                      : childData
                    : childData
                    ? childData
                    : undefined,
              }));
            }
            if (fieldName !== fieldProps.logical_field_name) {
              setUserInputs((prevUser: KeyStringModel) => ({
                ...prevUser,
                [fieldName]:
                  stageId === CONSTANTS.STAGE_NAMES.AD_1 ||
                  stageId === CONSTANTS.STAGE_NAMES.RP
                    ? (fieldName === "cb_declaration" ||
                        fieldName === "client_declaration_cert" ||
                        fieldName === "acknowledgement_cert") &&
                      (childValue === "N" || childValue === undefined)
                      ? undefined
                      : childValue
                    : childValue
                    ? childValue
                    : undefined,
              }));
            }
            return fieldName;
          });
      } else {
        setUserInputs({});
      }
    }
    // updateFormVlidation();
  };
