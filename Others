import { getProductInfo } from "../path-to-your-file"; // Update this path
import { urlParamAction } from "../utils/store/urlparam-slice";
import { errorAction } from "../utils/store/error-slice";
import configureMockStore from "redux-mock-store";
import thunk from "redux-thunk";
import * as getUrl from "../utils/common/change.utils";

const middlewares = [thunk];
const mockStore = configureMockStore(middlewares);

jest.mock("../utils/common/change.utils", () => ({
  getUrl: {
    getParameterByName: jest.fn(),
  },
}));

describe("getProductInfo action", () => {
  let store;

  beforeEach(() => {
    store = mockStore({});
    jest.clearAllMocks();
  });

  it("should dispatch productDetails action when matching products are found", async () => {
    const products = "product1,product2";
    const productInfoResponse = [
      { product_type: "product1", campaign: "campaign1" },
      { product_type: "product2", campaign: "campaign2" },
    ];

    getUrl.getParameterByName.mockImplementation((key) => {
      if (key === "campaign") return "campaign1,campaign2";
      return null;
    });

    await store.dispatch(getProductInfo(products, productInfoResponse));

    const actions = store.getActions();
    expect(actions).toContainEqual(
      urlParamAction.productDetails([
        { product_type: "product1", campaign: "campaign1" },
        { product_type: "product2", campaign: "campaign2" },
      ])
    );
  });

  it("should dispatch an error action when no matching products are found", async () => {
    const products = "product1";
    const productInfoResponse = [{ product_type: "product2" }];

    getUrl.getParameterByName.mockReturnValue(null);

    await store.dispatch(getProductInfo(products, productInfoResponse));

    const actions = store.getActions();
    expect(actions).toContainEqual(
      errorAction.getError({
        statusCode: "error",
        statusText: "no response",
      })
    );
  });

  it("should store intcid if present in URL", async () => {
    const products = "product1";
    const productInfoResponse = [{ product_type: "product1" }];

    getUrl.getParameterByName.mockImplementation((key) => {
      if (key === "intcid") return "testIntcid";
      return null;
    });

    const localStorageSetItemMock = jest.spyOn(localStorage, "setItem");

    await store.dispatch(getProductInfo(products, productInfoResponse));

    expect(localStorageSetItemMock).toHaveBeenCalledWith("intcid", "testIntcid");
  });

  it("should handle empty product list", async () => {
    const products = "";
    const productInfoResponse = [{ product_type: "product1" }];

    await store.dispatch(getProductInfo(products, productInfoResponse));

    const actions = store.getActions();
    expect(actions).toEqual([]);
  });

  it("should handle a single product without commas", async () => {
    const products = "product1";
    const productInfoResponse = [{ product_type: "product1" }];

    getUrl.getParameterByName.mockReturnValue(null);

    await store.dispatch(getProductInfo(products, productInfoResponse));

    const actions = store.getActions();
    expect(actions).toContainEqual(
      urlParamAction.productDetails([{ product_type: "product1" }])
    );
  });
});
