import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import LoanDisbursement from './LoanDisbursement'; // Import the component
import { useDispatch } from 'react-redux';
import * as apiService from '../api/loanService'; // Adjust import as per your actual API call location
import { CONSTANTS } from '../constants'; // Adjust import for constants if necessary

// Mock the necessary Redux actions and API calls
jest.mock('react-redux', () => ({
  useDispatch: jest.fn(),
  useSelector: jest.fn(),
}));

jest.mock('../api/loanService', () => ({
  getOfferCalulated: jest.fn(),
}));

describe('LoanDisbursement Component', () => {
  let dispatch;

  beforeEach(() => {
    dispatch = jest.fn();
    useDispatch.mockReturnValue(dispatch);

    // Mock the API response
    apiService.getOfferCalulated.mockResolvedValue({
      status: 200,
      data: {
        apr: 10,
        monthly_flat_rate: 5,
        repayment_amount: 2000,
        response_indicator: 'OK',
        response_action: 'PROCEED',
      },
    });
  });

  it('renders the component correctly', () => {
    render(<LoanDisbursement />);

    // Check if the header content is rendered
    expect(screen.getByText(/Budget Loan/)).toBeInTheDocument(); // Replace with actual content from the component

    // Check if the loan amount input is rendered
    expect(screen.getByTestId('amount_change')).toBeInTheDocument();
  });

  it('changes the loan amount when the slider is moved', () => {
    render(<LoanDisbursement />);

    // Simulate the slider change
    const slider = screen.getByRole('slider');
    userEvent.click(slider);
    fireEvent.change(slider, { target: { value: '5000' } });

    // Check if the loan amount is updated correctly
    expect(screen.getByText('5000')).toBeInTheDocument();
  });

  it('changes the tenure when a month option is selected', () => {
    render(<LoanDisbursement />);

    // Simulate selecting a different tenure option
    const tenorButton = screen.getByText('12 Months'); // Adjust based on actual values
    userEvent.click(tenorButton);

    // Check if the tenure is updated
    expect(tenorButton).toHaveClass('selected');
  });

  it('calculates the loan offer when valid data is provided', async () => {
    render(<LoanDisbursement />);

    // Simulate the loan amount change
    const slider = screen.getByRole('slider');
    fireEvent.change(slider, { target: { value: '5000' } });

    // Simulate selecting a tenure
    const tenorButton = screen.getByText('12 Months'); // Adjust based on actual values
    userEvent.click(tenorButton);

    // Trigger the API call by clicking the continue button
    const continueButton = screen.getByText(/Continue/);
    userEvent.click(continueButton);

    // Wait for the API response to complete
    await waitFor(() => expect(apiService.getOfferCalulated).toHaveBeenCalledTimes(1));

    // Check if the repayment amount is rendered after the API response
    expect(screen.getByText(/HKD 2000/)).toBeInTheDocument();
    expect(screen.getByText(/10%/)).toBeInTheDocument(); // APR
    expect(screen.getByText(/5%/)).toBeInTheDocument(); // Flat rate
  });

  it('displays error when API call fails', async () => {
    // Mock the API call to reject
    apiService.getOfferCalulated.mockRejectedValueOnce(new Error('API Error'));

    render(<LoanDisbursement />);

    // Simulate user interaction
    const slider = screen.getByRole('slider');
    fireEvent.change(slider, { target: { value: '5000' } });

    const continueButton = screen.getByText(/Continue/);
    userEvent.click(continueButton);

    // Wait for the error handling logic
    await waitFor(() => expect(dispatch).toHaveBeenCalledWith({
      type: 'GET_EXCEPTION_LIST',
      payload: [{ statusCode: undefined, statusText: 'API Error' }],
    }));
  });

  it('handles conditional rendering for different loan offer statuses', () => {
    // Render with different offer details
    render(<LoanDisbursement offerDetails={{ offer_details: [{ offer_status: "1004", bestOffer: 'Y' }] }} />);

    // Test if specific sections are rendered based on the offer status
    expect(screen.getByText(/Preliminary Content/)).toBeInTheDocument(); // Adjust based on actual content
    expect(screen.queryByText('Loan Amount Edit')).not.toBeInTheDocument();
  });

  it('dispatches correct actions for response types', () => {
    render(<LoanDisbursement />);

    // Simulate API response action 'STOP'
    apiService.getOfferCalulated.mockResolvedValueOnce({
      status: 200,
      data: {
        response_indicator: 'HARD',
        response_action: 'STOP',
        response_type: 'STOP',
      },
    });

    const continueButton = screen.getByText(/Continue/);
    userEvent.click(continueButton);

    // Check if the correct action is dispatched
    expect(dispatch).toHaveBeenCalledWith({
      type: 'UPDATE_STAGE_ID',
      payload: CONSTANTS.STAGE_NAMES.RP,
    });
    expect(dispatch).toHaveBeenCalledWith({
      type: 'GET_EXCEPTION_LIST',
      payload: [{
        statusCode: undefined,
        statusText: 'Sorry we are currently unable to process your application.',
        responseAction: 'DECLINE',
        responseType: 'HARD',
      }],
    });
  });
});
