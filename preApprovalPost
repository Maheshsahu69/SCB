import { store } from "../../../utils/store/store";
import PreApprovalUtil from "./preApprovalUtils";
import { dispatchError } from "../../../services/common-service";
import { adpayload } from "./payload";
import { CONSTANTS } from "../../../utils/common/constants";
import axios from "axios";
import { StoreModel } from "../../../utils/model/common-model";
import { useSelector } from "react-redux";


export const postSaveData = (): any => {
  const stageSelector = JSON.parse(JSON.stringify(store.getState()?.stages?.stages?.[0]));
  const baseUrl = `${process.env.REACT_APP_RTOB_BASE_URL}`;
  const application = `${process.env.REACT_APP_RTOB_APPLICATION_END_POINT}`;
  const channelRefNo = stageSelector?.stageInfo?.application?.channel_reference;
  const saveUrl = `${application + channelRefNo}`;
  let url = baseUrl + saveUrl;
  let currentStageData = JSON.parse(JSON.stringify(PreApprovalUtil.getFormConfigPayload() ||{}));
  if(stageSelector.stageId === CONSTANTS.STAGE_NAMES.FFD_1 || stageSelector.stageId === CONSTANTS.STAGE_NAMES.FFD_2) {
    currentStageData["applicant_documents"]= stageSelector.stageInfo.applicant_documents
  }
  const options = {
    method: "POST",
    url,
    headers: {
      "Content-Type": "application/json;charset=UTF-8",
      "Sc-Client-Context": PreApprovalUtil.getAckMetaData(channelRefNo),
    },
    body: JSON.stringify(currentStageData),
  };
  console.log(options);


  return axios
    ?.post(url, JSON.stringify(currentStageData), { headers: options.headers })
    .then((response) => {
      console.log("inside post call====",response);
      return Promise.resolve(response);
    })
    .catch((error) => {
      console.log("clientResponse", error);
      dispatchError(error);
      return Promise.reject(error);
    });
};

export const postDocSaveData = (documentData: any, transactionData: any, zolozDocumentData:any): any => {

  const stageSelector = JSON.parse(
    JSON.stringify(store.getState().stages.stages[0])
  );
  const docSelector = JSON.parse(
    JSON.stringify(store.getState().preApproval.documentZoloCheckRes)
  );
  var document_type_code = stageSelector.stageInfo.applicant_documents[0]?.document_list[0]?.document_options[0]?.document_types[0]?.document_type_code;
  const documents = docSelector?.documents || [];
  console.log(documents)
  const docDetails = documents.filter((item:any)=> item.document_type_code === document_type_code);
  console.log(docDetails)
  console.log(zolozDocumentData)
  const baseUrl = `${process.env.REACT_APP_RTOB_BASE_URL}`;

  const application = `${process.env.REACT_APP_RTOB_APPLICATION_END_POINT}`;
  const channelRefNo = stageSelector.stageInfo.application.channel_reference;
  const saveUrl = `${application + channelRefNo}`;
  let url = baseUrl + saveUrl;
  let currentStageData = JSON.parse(JSON.stringify(PreApprovalUtil.getFormConfigPayload()));
  currentStageData.applicants["ekycdocId"] = documentData[0].docId;
  currentStageData.applicants["ekycdocumentName"] = documentData[0].documentName;
  currentStageData.applicants["zoloz_transaction_id"] = transactionData.transactionId;
  currentStageData.applicants["zoloz_value"] = transactionData.result.resultMessage;
  currentStageData.applicants["work_type_a_1"] = "S001";
  delete currentStageData.application.error;
  delete currentStageData.application.response_action;
  delete currentStageData.application.response_type;
  const documentsSelector = JSON.parse(JSON.stringify(store.getState().preApproval.incomeProofDocumentUpload||{}));
  let documentsList:any= [];
  for(let i in documentsSelector) {
    let item={
      "document_status": "Accepted",
      "document_name": documentsSelector[i].filename,
      "period": "",
      "orientation": "landscape",
      "fileSize": documentsSelector[i].file.size,
      "document_id": documentsSelector[i].docId,
      "document_sequence_number": documentsSelector[i].imageOrder,
      "uploaded_to_filenet": "Y",
      "document_option_sequence": null,
      "document_category_code": documentsSelector[i].documentCategoryCode,
      "document_type_code": documentsSelector[i].documentTypeCode,
      "docLength": documentsSelector[i].imageOrder
  }
    documentsList.push(item)
  }
  
  currentStageData.applicant_documents= [
    {
        "document_list": [
            {
                "document_category": "Colour Identity Proof",
                "document_category_code": "R0001",
                "min_options_req": "1",
                "document_category_visible": null,
                "document_category_seq": null,
                "document_options": [
                    {
                        "document_option_sequence": "1",
                        "document_option_selected": "N",
                        "document_types": [
                            {
                                "document_requested_stage": null,
                                "document_type": "HKID Copy",
                                "document_type_code": "A001",
                                "document_sub_type": null,
                                "no_of_periods": null,
                                "id_expiry": null,
                                "id_number": null,
                                "uploaded_documents": [
                                    {
                                        "docId": zolozDocumentData.docId,
                                        "country": "HK",
                                        "documentStatus": "Accepted",
                                        "appId": zolozDocumentData.appId,
                                        "documentCategoryCode": zolozDocumentData.documentCategoryCode,
                                        "errorDescription": null,
                                        "errorCode": null,
                                        "responseStatus": zolozDocumentData.responseStatus,
                                        "documentTypeCode": zolozDocumentData.documentTypeCode,
                                        "documentOptionSequence": zolozDocumentData.documentOptionSequence,
                                        "imageOrder": zolozDocumentData.imageOrder,
                                        "applicantId": zolozDocumentData.applicantId,
                                        "period": zolozDocumentData.period,
                                        "documentName": zolozDocumentData.documentName,
                                        "document_id": zolozDocumentData.document_id,
                                        "document_status": "Accepted",
                                        "document_sequence_number": "1",
                                        "uploaded_to_filenet": "Y",
                                        "document_option_sequence": "1",
                                        "document_category_code": "R0001",
                                        "document_type_code": "A001",
                                        "document_name": zolozDocumentData.documentName+".png",
                                        "docLength": 1
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "applicant_sequence_number": 1
            },
            {
              "document_category": "Income Proof",
              "document_category_code": "R0005",
              "min_options_req": "1",
              "document_category_visible": null,
              "document_category_seq": null,
              "document_options": [
                  {
                      "document_option_sequence": "1",
                      "document_option_selected": "N",
                      "document_types": [
                          {
                            "document_requested_stage": null,
                            "document_type": "3-month Income proof",
                            "document_type_code": "A023",
                            "document_sub_type": null,
                            "no_of_periods": null,
                            "id_expiry": null,
                            "id_number": null,
                            "uploaded_documents": documentsList
                          }
                      ]
                  }
              ],
              "applicant_sequence_number": 1
          }
        ],
        "applicant_sequence_number": 1,
        "journey_type": "NTB",
        "icdd_reference_no_availability": null,
        "email_id_change": null,
        "mobile_no_change": null,
        "last_updated_credit_limit_date_flag": null,
        "staff_category": null
    }
  ]

  const options = {
    method: "POST",
    url,
    headers: {
      "Content-Type": "application/json;charset=UTF-8",
      "Sc-Client-Context": PreApprovalUtil.getAckMetaData(channelRefNo),
    },
    body: JSON.stringify(currentStageData),
  };
  console.log(options);


  return axios
    .post(url, JSON.stringify(currentStageData), { headers: options.headers })
    .then((response) => {
      console.log(response);
      return Promise.resolve(response);
    })
    .catch((error) => {
      console.log("clientResponse", error);
      dispatchError(error);
      return Promise.reject(error);
    });
};

export const postBasicData = (): any => {
  const stageSelector = JSON.parse(
    JSON.stringify(store.getState().stages.stages[0])
  );
  const baseUrl = `${process.env.REACT_APP_RTOB_BASE_URL}`;
  const application = `${process.env.REACT_APP_RTOB_APPLICATION_END_POINT}`;
  // const additionalData = `${process.env.REACT_APP_RTOB_ADDITIONAL_DATA_END_POINT}`;
  const channelRefNo = stageSelector.stageInfo.application.channel_reference;
  const basicData = `${process.env.REACT_APP_RTOB_BASIC_DATA_END_POINT}`;
  const saveUrl = `${application + channelRefNo}`;
  var url = baseUrl + saveUrl + basicData;
  console.log(adpayload)
  //var currentStageDataPayload= JSON.parse(JSON.stringify(bdPayload));
  var currentStageData = JSON.parse(JSON.stringify(PreApprovalUtil.getFormConfigPayload()));


  const options = {
    method: "POST",
    url,
    headers: {
      "Content-Type": "application/json;charset=UTF-8",
      "Sc-Client-Context": PreApprovalUtil.getAckMetaData(channelRefNo),
    },
    body: JSON.stringify(currentStageData),
  };
  console.log(options);


  return axios
    .post(url, JSON.stringify(currentStageData), { headers: options.headers })
    .then((response: any) => {
      console.log(response);
      return Promise.resolve(response);
    })
    .catch((error: any) => {
      console.log("clientResponse", error);
      return Promise.reject(error);
    });
};

export const postAditionalData = (): any => {
  const stageSelector = JSON.parse(
    JSON.stringify(store.getState().stages.stages[0])
  );
  const baseUrl = `${process.env.REACT_APP_RTOB_BASE_URL}`;
  const application = `${process.env.REACT_APP_RTOB_APPLICATION_END_POINT}`;
  const additionalData = `${process.env.REACT_APP_RTOB_ADDITIONAL_DATA_END_POINT}`;
  const channelRefNo = stageSelector.stageInfo.application.channel_reference;
  const saveUrl = `${application + channelRefNo}`;
  var url = baseUrl + saveUrl + additionalData; 
  var currentStageData= JSON.parse(JSON.stringify(PreApprovalUtil.getADFormConfigPayload()));
  console.log(currentStageData)

  const options = {
    method: "POST",
    url,
    headers: {
      "Content-Type": "application/json;charset=UTF-8",
      "Sc-Client-Context": PreApprovalUtil.getAckMetaData(channelRefNo),
    },
    body: JSON.stringify(currentStageData),
  };
  console.log(options);


  return axios
    .post(url, JSON.stringify(currentStageData), { headers: options.headers })
    .then((response: any) => {
      console.log(response);
      return Promise.resolve(response);
    })
    .catch((error: any) => {
      dispatchError(error);
      console.log("clientResponse", error);
      return Promise.reject(error);
    });
};

export const postDocuments = (channelReference: any, file: any): any => {
  const imageOrder = JSON.parse(JSON.stringify(store.getState().preApproval.incomeProofDocumentUpload));
  
  console.log("store:----", store.getState())
  const documentJson: any = {
    origin: "front-line-supporting-document",
    documentCategoryCode: "R0005",
    documentTypeCode: "A023",
    applicantId: 1,
    imageOrder: imageOrder?.length + 1,
    period: 0,
    isWatermarkRequired: "Y",
    documentOptionSequence: "undefined",
  };

  console.log("----",  "imageOrder :",imageOrder);

  const baseUrl = `${process.env.REACT_APP_RTOB_BASE_URL}`;
  const endPoint = `${process.env.REACT_APP_RTOB_DOCUMENTS_END_POINT}`;
  const application = `${process.env.REACT_APP_RTOB_APPLICATION_END_POINT}`;

  const url = baseUrl + application + channelReference + endPoint;


  let data = new FormData();
  data.append("file", file);
  data.append("documentJson", JSON.stringify(documentJson));

  const options = {
    method: "POST",
    url,
    headers: {
      "Content-Type": "multipart/form-data",
      "Sc-Client-Context": PreApprovalUtil.getAckMetaData(channelReference),
    },
    body: JSON.stringify(data),
  };
const docaxios = axios.create({
    headers: options.headers,
  });

   return docaxios
   .post(url, data, options)
   .then((response: any) => {
          return Promise.resolve(response);
        })
        .catch((error: any) => {
          dispatchError(error);
          console.log("clientResponse", error);
          return Promise.reject(error);
        });

  }

export const postQRCodeZOLO = (channelReference: any, docType: any): any => {
  const baseUrl = `${process.env.REACT_APP_RTOB_BASE_URL}`;
  const application = `${process.env.REACT_APP_RTOB_APPLICATION_END_POINT}`;
  const endPoint = `${process.env.REACT_APP_RTOB_QRCODE_SMART_HKID_END_POINT}`

  const url = baseUrl + application + channelReference + endPoint;
  const payload = {
    docType: docType,
    qrCodeFlag: "Y",
    h5ModeConfig: {
      completeCallbackUrl: "https://pt.sc.com/onboarding/hk/zolozThankYou.html?scbToken=" + channelReference + "&lang=en",
      interruptCallbackUrl: "https://pt.sc.com/onboarding/hk/zoloz-error.html?scbToken=" + channelReference + "&lang=en",
      locale: ""
    }
  }

  const options = {
    method: "POST",
    url,
    headers: {
      "Content-Type": "application/json;charset=UTF-8",
      "Sc-Client-Context": PreApprovalUtil.getAckMetaData(channelReference),
    },
    body: JSON.stringify(payload),
  };

  return axios
    .post(url, options.body, { headers: options.headers })
    .then((response) => {
      return Promise.resolve(response);
    })
    .catch((error) => {
      dispatchError(error);
      console.log("clientResponse", error);
      return Promise.reject(error);
    });
};

export const postZOLOCheck = (channelReference: any, transactionId: any, docType: any): any => {
  const stageSelector = JSON.parse(JSON.stringify(store.getState().stages.stages[0].stageInfo));
  const baseUrl = `${process.env.REACT_APP_RTOB_BASE_URL}`;
  const application = `${process.env.REACT_APP_RTOB_APPLICATION_END_POINT}`;
  const endPoint = `${process.env.REACT_APP_RTOB_ZOLO_CHECK_RESULT_END_POINT}`;

  const url = baseUrl + application + channelReference + endPoint;
  const payload = {
    transactionId: transactionId,
    isReturnImage: "Y",
    first_name_a_1: stageSelector.applicants.first_name_a_1,
    last_name_a_1: stageSelector.applicants.last_name_a_1,
    date_of_birth_a_1: stageSelector.applicants.date_of_birth_a_1,
    HKID_a_1: stageSelector.applicants.HKID_a_1,
    product_type: stageSelector.applicants.product_type,
    product_category: stageSelector.applicants.product_category,
    hkid_type: docType,
    cos_ref_number: stageSelector.application.cos_ref_number
  }

  const options = {
    method: "POST",
    url,
    headers: {
      "Content-Type": "application/json;charset=UTF-8",
      "Sc-Client-Context": PreApprovalUtil.getAckMetaData(channelReference),
    },
    body: JSON.stringify(payload),
  };

  return axios
    .post(url, options.body, { headers: options.headers })
    .then((response) => {
      return Promise.resolve(response);
    })
    .catch((error) => {
      dispatchError(error);
      console.log("clientResponse", error);
      return Promise.reject(error);
    });
};


// export const postAcknowledge = (channelReference: any): any => {

//   const baseUrl = `${process.env.REACT_APP_RTOB_BASE_URL}`;
//   const application =`${process.env.REACT_APP_RTOB_APPLICATION_END_POINT}`;
//   const endPoint = `${process.env.REACT_APP_RTOB_ACKNOWLEDGE_END_POINT}` 
//   const documents =  `${process.env. REACT_APP_RTOB_DOCUMENTS_END_POINT}` 

//   const url = baseUrl + application + channelReference +documents+ endPoint
//     const payload={
//       applicationRefNo: "HK20241111900057",
//       documents:[{
//             docId: "7d59d78392a369a2b41415b285951542357969b0c4e61c7d91b9505d79fc465b",
//             country: "HK",
//             documentStatus: "Accepted",
//             appId: "041115563f21312024",
//             documentCategoryCode: "R0001",
//             errorDescription: null,
//             errorCode: null,
//             responseStatus: "SUCCESS",
//             documentTypeCode: "A001",
//             documentOptionSequence: "1",
//             imageOrder: "1",
//             applicantId: "1",
//             period: 0,
//             documentName: "HKID_Front_Page1731321390083",
//             document_id: "7d59d78392a369a2b41415b285951542357969b0c4e61c7d91b9505d79fc465b",
//             document_status: "Accepted",
//             document_sequence_number: "1",
//             uploaded_to_filenet: "Y",
//             document_option_sequence: "1",
//             document_category_code: "R0001",
//             document_type_code: "A001",
//             document_name: "HKID_Front_Page1731321390083.png"
//         },
//         {
//             docId: "38d983dd5913639923530e85d262ab9a9c2498991a20e0b2d347423bbda85ec8",
//             country: "HK",
//             documentStatus: "Accepted",
//             appId: "041115563f21312024",
//             documentCategoryCode: "R0006",
//             errorDescription: null,
//             errorCode: null,
//             responseStatus: "SUCCESS",
//             documentTypeCode: "A039",
//             documentOptionSequence: "1",
//             imageOrder: "1",
//             applicantId: "1",
//             period: 0,
//             documentName: "Selfie_Image1731321390121"
//         }
//     ],
//     optionsSelected:[
//       {
//           applicantId: 1,
//           options: [
//               {
//                   documentCategoryCode: "R0001",
//                   documentTypeCode: "A001",
//                   documentOptionSequence: "1"
//               }
//           ]
//       }
//   ],
//   stage:"Zoloz_ACK"

//   }

//   const options = {
//     method: "POST",
//     url,
//     headers: {
//       "Content-Type":"application/json;charset=UTF-8",
//       "Sc-Client-Context": PreApprovalUtil.getAckMetaData(channelReference),
//     },
//     body:JSON.stringify(payload),
//   };

//   return axios
//     .post(url, options.body, { headers: options.headers })
//     .then((response:any) => {
//       return Promise.resolve(response);
//     })
//     .catch((error:any) => {
//       dispatchError(error);
//       console.log("clientResponse", error);
//       return Promise.reject(error);
//     });
// };

export const postZolozAcknowledge = (channelReference: any, documentsList?: any): any => {
  const stageSelector = JSON.parse(JSON.stringify(store.getState().stages.stages[0].stageInfo));
  const channel_reference = stageSelector.application.channel_reference
  const baseUrl = `${process.env.REACT_APP_RTOB_BASE_URL}`;
  const application = `${process.env.REACT_APP_RTOB_APPLICATION_END_POINT}`;
  const endPoint = `${process.env.REACT_APP_RTOB_ACKNOWLEDGE_END_POINT}`;
  const documents = `${process.env.REACT_APP_RTOB_DOCUMENTS_END_POINT}`;

  console.log(baseUrl)
  console.log(application)
  console.log(documents)
  console.log(channel_reference)
  console.log(endPoint)
  const url = baseUrl + application + channel_reference + documents + endPoint;
  url.replace('";', "");
  console.log(url)
  const payload = {
    applicationRefNo: stageSelector.application.application_reference,
    documents: documentsList,
    optionsSelected: [
      {
        applicantId: 1,
        options: [
          {
            documentCategoryCode: "R0001",
            documentTypeCode: "A001",
            documentOptionSequence: "1"
          }
        ]
      }
    ],
    stage: "Zoloz_ACK"
  }

  const options = {
    method: "POST",
    url,
    headers: {
      "Content-Type": "application/json;charset=UTF-8",
      "Sc-Client-Context": PreApprovalUtil.getAckMetaData(channelReference),
    },
    body: JSON.stringify(payload),
  };

  return axios
    .post(url, options.body, { headers: options.headers })
    .then((response) => {
      return Promise.resolve(response);
    })
    .catch((error) => {
      dispatchError(error);
      console.log("clientResponse", error);
      return Promise.reject(error);
    });
};

export const postFinalAcknowledge = (channelReference: any): any => {
  const stageSelector = JSON.parse(JSON.stringify(store.getState().stages.stages[0].stageInfo));
  const docSelector = JSON.parse(JSON.stringify(store.getState().preApproval.incomeProofDocumentUpload));
  let documentsList:any= [];
  for(let i in docSelector) {
    delete docSelector[i].file;
    delete docSelector[i].filename;
    delete docSelector[i].filesize;
    docSelector[i]["documentStatus"]= "Accepted";
    documentsList.push(docSelector[i])
  }
  console.log('documentsList',documentsList)
  const channel_reference = stageSelector.application.channel_reference
  const baseUrl = `${process.env.REACT_APP_RTOB_BASE_URL}`;
  const application = `${process.env.REACT_APP_RTOB_APPLICATION_END_POINT}`;
  const endPoint = `${process.env.REACT_APP_RTOB_ACKNOWLEDGE_END_POINT}`
  const documents = `${process.env.REACT_APP_RTOB_DOCUMENTS_END_POINT}`

  const url = baseUrl + application + channel_reference + documents + endPoint;
  url.replace('";', "");
  const payload = {
    applicationRefNo: stageSelector.application.application_reference,
    documents: documentsList,
    optionsSelected: [
      {
        applicantId: 1,
        options: []
      }
    ],
    stage: "Final_ACK"
  }

  const options = {
    method: "POST",
    url,
    headers: {
      "Content-Type": "application/json;charset=UTF-8",
      "Sc-Client-Context": PreApprovalUtil.getAckMetaData(channelReference),
    },
    body: JSON.stringify(payload),
  };

  return axios
    .post(url, options.body, { headers: options.headers })
    .then((response) => {
      return Promise.resolve(response);
    })
    .catch((error) => {
      dispatchError(error);
      console.log("clientResponse", error);
      return Promise.reject(error);
    });
};

export const postPdfPreview = (channelReference: any): any => {

  const stageSelector = JSON.parse(JSON.stringify(store.getState().stages.stages[0].stageInfo));
  const channel_reference = stageSelector.application.channel_reference
  const baseUrl = `${process.env.REACT_APP_RTOB_BASE_URL}`;
  const dynamicDoc = `${process.env.REACT_APP_RTOB_DYNAMIC_DOCUMENT}`;
  const endPoint = `${process.env.REACT_APP_RTOB_PDF_PREVIEW}`
  console.log('channelReference--', channelReference)
  console.log(baseUrl)
  console.log(dynamicDoc)
  console.log(endPoint)
  // const url = baseUrl+dynamicDoc+channelReference+endPoint;
  const url = `${process.env.REACT_APP_RTOB_BASE_URL}${process.env.REACT_APP_RTOB_DYNAMIC_DOCUMENT}${channel_reference}${process.env.REACT_APP_RTOB_PDF_PREVIEW}`;
  url.replace('";', "");
  console.log(url)
  const payload = {
    appInRefNumber: stageSelector.application.application_reference,
    template_name: "ekyc_report",
    action: "generate",
    page_id: "HK_ALIPAY_AOF_ENG.thy",
  };

  const options = {
    method: "POST",
    url,
    headers: {
      "Content-Type": "application/json;charset=UTF-8",
      "Sc-Client-Context": PreApprovalUtil.getAckMetaData(channelReference),
    },
    body: JSON.stringify(payload),
  };

  return axios
    .post(url, options.body, { headers: options.headers })
    .then((response) => {
      return Promise.resolve(response);
    })
    .catch((error) => {
      dispatchError(error);
      console.log("clientResponse", error);
      return Promise.reject(error);
    });
};

export const postTMXUserSession = (channelReference: any): any => {

  const stageSelector = JSON.parse(JSON.stringify(store.getState().stages.stages[0].stageInfo));

  const baseUrl = `${process.env.REACT_APP_RTOB_BASE_URL}`;
  const application =`${process.env.REACT_APP_RTOB_APPLICATION_END_POINT}`;
  const endPoint = `${process.env.REACT_APP_RTOB_VERIFY_TMX_USER_SESSION}` 

  const url = baseUrl + application + channelReference+ endPoint
    const payload = {
      session_id_tmx: PreApprovalUtil.generateUUID(),
      cos_ref_number: stageSelector.application.cos_ref_number,
    };
 
  const options = {
    method: "POST",
    url,
    headers: {
      "Content-Type": "application/json;charset=UTF-8",
      "Sc-Client-Context": PreApprovalUtil.getAckMetaData(channelReference),
    },
    body: JSON.stringify(payload),
  };

  return axios
    .post(url, options.body, { headers: options.headers })
    .then((response) => {
      return Promise.resolve(response);
    })
    .catch((error) => {
      dispatchError(error);
      console.log("clientResponse", error);
      return Promise.reject(error);
    });
};

export const postFulFilmentData = (payload: any): any => {

  const stageSelector = JSON.parse(JSON.stringify(store.getState().stages.stages[0]));
  const channel_reference = stageSelector.stageInfo.application.channel_reference
  const baseUrl = `${process.env.REACT_APP_RTOB_BASE_URL}`;
  const application = `${process.env.REACT_APP_RTOB_APPLICATION_END_POINT}`;
  const endPoint = `${process.env.REACT_APP_RTOB_FULFILMENT_DATA}`

  const url = baseUrl + application + channel_reference + endPoint

  payload = JSON.parse(JSON.stringify(payload));
  // var payload= offerPayload;
  console.log(stageSelector)
  payload.stage.page_id = stageSelector.stageId;
  payload.stage.workflow_stage_id = stageSelector.stageId.split("-")[0].toUpperCase();
  payload.stage.stage_id = stageSelector.stageId.replace("-", "").toUpperCase();
  payload.stage.stage_status = "incomplete";
  payload.status_data = null;
  payload.preapproved = null;
  payload.stage.stage_params = {
    "is_dedupe_required": false,
    "current_applicant": 0,
    "eb_status": null
  };
  payload.temp_login_data = null;
  payload.service_response = null;
  payload.application.service_type = stageSelector.stageId.replace("-", "").toUpperCase();
  payload.application.alipay_ref_number = null;
  payload.application.ext_acceptance_reference_number = null;
  payload.application.ext_authentication_reference_number = null;
  payload.application.stage_wise = null;
  payload.application.version = null;
  payload.application.source_system_name = '3';
  payload.application.page_wise = null;
  payload["applicant_bureau_details"] = null;
  payload.applicants = payload.applicants.length > 0 ? payload.applicants[0] : payload.applicants;
  payload.applicants["repayment_account_bank_code_a_1"]= payload.applicants.oth_bank_name_a_1;
  payload.applicants["repayment_account_number_a_1"]= payload.applicants.oth_bank_number_a_1;
  payload.applicants["draw_down_amount_a_1"]= payload.applicants.requested_loan_amount_a_1;
  payload.applicants["repayment_oth_bank_name_a_1"]= null;
  payload.applicants["repayment_oth_bank_number_a_1"]= null;
  payload.applicants["repayment_scb_bank_number_a_1"]= null;
  payload.applicants["repayment_select_account_a_1"]= null;
  // payload.applicants["net-disbursement-amount"]= payload.applicants.requested_loan_amount_a_1;
  payload.client = {
    "journey": "prelogin_ntc_or_ntp",
    "auth-type": "manual",
    "login-type": "prelogin"
  }
  delete payload.application.page_status;
  delete payload.application.is_save_to_pega;
  delete payload.application.armcode;
  delete payload.application.arm_code;
  delete payload.application.journey_type_hk;
  delete payload.application.is_td_with_casa;
  delete payload.application.notification_required;
  delete payload.application.sub_segment;
  delete payload.application.segment;
  delete payload.application.closing_id;
  delete payload.application.error;
  delete payload.application.response_type;
  delete payload.application.response_action;
  delete payload.applicants.client_pl_consent4_a_1;
  delete payload.customerDetails;

  const options = {
    method: "POST",
    url,
    headers: {
      "Content-Type": "application/json;charset=UTF-8",
      "Sc-Client-Context": PreApprovalUtil.getAckMetaData(channel_reference),
    },
    body: JSON.stringify(payload),
  };

  return axios
    .post(url, options.body, { headers: options.headers })
    .then((response) => {
      return Promise.resolve(response);
    })
    .catch((error) => {
      dispatchError(error);
      console.log("clientResponse", error);
      return Promise.reject(error);
    });
};



