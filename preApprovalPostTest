import axios from "axios";
import MockAdapter from "axios-mock-adapter";
import {
  postSaveData,
  postDocSaveData,
  postBasicData,
  postAditionalData,
  postDocumemts,
  postQRCodeZOLO,
  postZOLOCheck,
  postZolozAcknowledge,
  postFinalAcknowledge,
  postPdfPreview,
  postTMXUserSession,
  postFulFilmentData,
} from "./yourFilePath"; // Adjust file path
import { store } from "../../../utils/store/store";
import PreApprovalUtil from "./preApprovalUtils";
import { dispatchError } from "../../../services/common-service";

jest.mock("../../../utils/store/store");
jest.mock("../../../services/common-service");
jest.mock("./preApprovalUtils");

describe("API Utility Functions", () => {
  let mockAxios;

  beforeEach(() => {
    mockAxios = new MockAdapter(axios);
    jest.clearAllMocks();
  });

  afterEach(() => {
    mockAxios.restore();
  });

  const mockState = {
    stages: {
      stages: [
        {
          stageInfo: {
            application: { channel_reference: "12345", application_reference: "app123" },
            applicants: {
              first_name_a_1: "John",
              last_name_a_1: "Doe",
              date_of_birth_a_1: "1990-01-01",
              HKID_a_1: "AB123456",
              product_type: "Loan",
              product_category: "Personal",
            },
          },
        },
      ],
    },
  };

  store.getState.mockReturnValue(mockState);

  PreApprovalUtil.getFormConfigPayload.mockReturnValue({
    applicants: {},
    application: {},
  });

  PreApprovalUtil.getAckMetaData.mockReturnValue("mock-metadata");

  const mockResponse = { status: "success" };

  test("postSaveData - success", async () => {
    mockAxios.onPost(/mockURL/).reply(200, mockResponse);

    const result = await postSaveData();

    expect(result.data).toEqual(mockResponse);
    expect(mockAxios.history.post.length).toBe(1);
    expect(dispatchError).not.toHaveBeenCalled();
  });

  test("postSaveData - failure", async () => {
    const mockError = { message: "Network Error" };
    mockAxios.onPost(/mockURL/).reply(500, mockError);

    await expect(postSaveData()).rejects.toThrow("Request failed with status code 500");

    expect(dispatchError).toHaveBeenCalledWith(mockError);
    expect(mockAxios.history.post.length).toBe(1);
  });

  test("postDocSaveData - success", async () => {
    const documentData = [{ docId: "doc1", documentName: "document.pdf" }];
    const transactionData = { transactionId: "txn123", result: { resultMessage: "success" } };

    mockAxios.onPost(/mockURL/).reply(200, mockResponse);

    const result = await postDocSaveData(documentData, transactionData);

    expect(result.data).toEqual(mockResponse);
    expect(mockAxios.history.post.length).toBe(1);
    expect(dispatchError).not.toHaveBeenCalled();
  });

  test("postDocSaveData - failure", async () => {
    const documentData = [{ docId: "doc1", documentName: "document.pdf" }];
    const transactionData = { transactionId: "txn123", result: { resultMessage: "success" } };
    const mockError = { message: "Network Error" };

    mockAxios.onPost(/mockURL/).reply(500, mockError);

    await expect(postDocSaveData(documentData, transactionData)).rejects.toThrow("Request failed with status code 500");

    expect(dispatchError).toHaveBeenCalledWith(mockError);
    expect(mockAxios.history.post.length).toBe(1);
  });

  test("postBasicData - success", async () => {
    mockAxios.onPost(/mockURL/).reply(200, mockResponse);

    const result = await postBasicData();

    expect(result.data).toEqual(mockResponse);
    expect(mockAxios.history.post.length).toBe(1);
    expect(dispatchError).not.toHaveBeenCalled();
  });

  test("postAditionalData - success", async () => {
    mockAxios.onPost(/mockURL/).reply(200, mockResponse);

    const result = await postAditionalData();

    expect(result.data).toEqual(mockResponse);
    expect(mockAxios.history.post.length).toBe(1);
    expect(dispatchError).not.toHaveBeenCalled();
  });

  test("postDocumemts - success", async () => {
    const file = new Blob(["file content"], { type: "application/pdf" });
    const formData = new FormData();
    formData.append("file", file);

    mockAxios.onPost(/mockURL/).reply(200, mockResponse);

    const result = await postDocumemts("12345", file);

    expect(result.data).toEqual(mockResponse);
    expect(mockAxios.history.post.length).toBe(1);
    expect(dispatchError).not.toHaveBeenCalled();
  });

  test("postQRCodeZOLO - success", async () => {
    mockAxios.onPost(/mockURL/).reply(200, mockResponse);

    const result = await postQRCodeZOLO("12345", "HKID");

    expect(result.data).toEqual(mockResponse);
    expect(mockAxios.history.post.length).toBe(1);
    expect(dispatchError).not.toHaveBeenCalled();
  });

  test("postZOLOCheck - success", async () => {
    mockAxios.onPost(/mockURL/).reply(200, mockResponse);

    const result = await postZOLOCheck("12345", "txn123", "HKID");

    expect(result.data).toEqual(mockResponse);
    expect(mockAxios.history.post.length).toBe(1);
    expect(dispatchError).not.toHaveBeenCalled();
  });

  test("postZolozAcknowledge - success", async () => {
    mockAxios.onPost(/mockURL/).reply(200, mockResponse);

    const result = await postZolozAcknowledge("12345", [{ docId: "doc123" }]);

    expect(result.data).toEqual(mockResponse);
    expect(mockAxios.history.post.length).toBe(1);
    expect(dispatchError).not.toHaveBeenCalled();
  });

  test("postFinalAcknowledge - success", async () => {
    mockAxios.onPost(/mockURL/).reply(200, mockResponse);

    const result = await postFinalAcknowledge("12345");

    expect(result.data).toEqual(mockResponse);
    expect(mockAxios.history.post.length).toBe(1);
    expect(dispatchError).not.toHaveBeenCalled();
  });

  test("postPdfPreview - success", async () => {
    mockAxios.onPost(/mockURL/).reply(200, mockResponse);

    const result = await postPdfPreview("12345");

    expect(result.data).toEqual(mockResponse);
    expect(mockAxios.history.post.length).toBe(1);
    expect(dispatchError).not.toHaveBeenCalled();
  });

  test("postTMXUserSession - success", async () => {
    mockAxios.onPost(/mockURL/).reply(200, mockResponse);

    const result = await postTMXUserSession("12345");

    expect(result.data).toEqual(mockResponse);
    expect(mockAxios.history.post.length).toBe(1);
    expect(dispatchError).not.toHaveBeenCalled();
  });

  test("postFulFilmentData - success", async () => {
    const payload = { applicants: [{ firstName: "John" }] };

    mockAxios.onPost(/mockURL/).reply(200, mockResponse);

    const result = await postFulFilmentData(payload);

    expect(result.data).toEqual(mockResponse);
    expect(mockAxios.history.post.length).toBe(1);
    expect(dispatchError).not.toHaveBeenCalled();
  });
});

import axios from "axios";
import { store } from "../../../utils/store/store";
import PreApprovalUtil from "./preApprovalUtils";
import { dispatchError } from "../../../services/common-service";
import { postSaveData } from "./yourComponentFile";

jest.mock("axios");
jest.mock("../../../utils/store/store", () => ({
  store: {
    getState: jest.fn(),
  },
}));
jest.mock("./preApprovalUtils", () => ({
  getFormConfigPayload: jest.fn(),
  getAckMetaData: jest.fn(),
}));
jest.mock("../../../services/common-service", () => ({
  dispatchError: jest.fn(),
}));

describe("postSaveData", () => {
  const mockStages = [
    {
      stageInfo: {
        application: {
          channel_reference: "testChannelRef",
        },
      },
    },
  ];

  beforeEach(() => {
    jest.clearAllMocks();
    process.env.REACT_APP_RTOB_BASE_URL = "http://baseurl.com";
    process.env.REACT_APP_RTOB_APPLICATION_END_POINT = "/application/";
    store.getState.mockReturnValue({ stages: { stages: mockStages } });
    PreApprovalUtil.getFormConfigPayload.mockReturnValue({ key: "value" });
    PreApprovalUtil.getAckMetaData.mockReturnValue("mockAckMetaData");
  });

  it("should make a successful POST request and resolve the response", async () => {
    const mockResponse = { data: "mockResponse" };
    axios.post.mockResolvedValue(mockResponse);

    const result = await postSaveData();

    expect(store.getState).toHaveBeenCalled();
    expect(PreApprovalUtil.getFormConfigPayload).toHaveBeenCalled();
    expect(PreApprovalUtil.getAckMetaData).toHaveBeenCalledWith("testChannelRef");
    expect(axios.post).toHaveBeenCalledWith(
      "http://baseurl.com/application/testChannelRef",
      JSON.stringify({ key: "value" }),
      {
        headers: {
          "Content-Type": "application/json;charset=UTF-8",
          "Sc-Client-Context": "mockAckMetaData",
        },
      }
    );
    expect(result).toBe(mockResponse);
  });

  it("should catch an error and call dispatchError", async () => {
    const mockError = new Error("mockError");
    axios.post.mockRejectedValue(mockError);

    await expect(postSaveData()).rejects.toThrow("mockError");

    expect(store.getState).toHaveBeenCalled();
    expect(PreApprovalUtil.getFormConfigPayload).toHaveBeenCalled();
    expect(PreApprovalUtil.getAckMetaData).toHaveBeenCalledWith("testChannelRef");
    expect(dispatchError).toHaveBeenCalledWith(mockError);
  });
});

import axios from "axios";
import { store } from "../../../utils/store/store";
import PreApprovalUtil from "./preApprovalUtils";
import { dispatchError } from "../../../services/common-service";
import { postSaveData } from "./yourComponentFile";

jest.mock("axios");
jest.spyOn(store, "getState");
jest.spyOn(PreApprovalUtil, "getFormConfigPayload");
jest.spyOn(PreApprovalUtil, "getAckMetaData");
jest.spyOn(global.console, "log"); // For logging during the tests

jest.mock("../../../services/common-service", () => ({
  dispatchError: jest.fn(),
}));

describe("postSaveData", () => {
  const mockStages = [
    {
      stageInfo: {
        application: {
          channel_reference: "testChannelRef",
        },
      },
    },
  ];

  beforeEach(() => {
    jest.clearAllMocks(); // Clear all mocks to ensure a clean test environment
    process.env.REACT_APP_RTOB_BASE_URL = "http://baseurl.com";
    process.env.REACT_APP_RTOB_APPLICATION_END_POINT = "/application/";
    store.getState.mockReturnValue({ stages: { stages: mockStages } });
    PreApprovalUtil.getFormConfigPayload.mockReturnValue({ key: "value" });
    PreApprovalUtil.getAckMetaData.mockReturnValue("mockAckMetaData");
  });

  it("should make a successful POST request and resolve the response", async () => {
    const mockResponse = { data: "mockResponse" };
    axios.post.mockResolvedValue(Promise.resolve(mockResponse)); // Use Promises explicitly

    const result = await postSaveData();

    // Verify function calls
    expect(store.getState).toHaveBeenCalled();
    expect(PreApprovalUtil.getFormConfigPayload).toHaveBeenCalled();
    expect(PreApprovalUtil.getAckMetaData).toHaveBeenCalledWith("testChannelRef");

    // Verify axios call
    expect(axios.post).toHaveBeenCalledWith(
      "http://baseurl.com/application/testChannelRef",
      JSON.stringify({ key: "value" }),
      {
        headers: {
          "Content-Type": "application/json;charset=UTF-8",
          "Sc-Client-Context": "mockAckMetaData",
        },
      }
    );

    // Verify result
    expect(result).toBe(mockResponse);

    // Verify logging
    expect(console.log).toHaveBeenCalledWith({
      method: "POST",
      url: "http://baseurl.com/application/testChannelRef",
      headers: {
        "Content-Type": "application/json;charset=UTF-8",
        "Sc-Client-Context": "mockAckMetaData",
      },
      body: JSON.stringify({ key: "value" }),
    });
  });

  it("should catch an error and call dispatchError", async () => {
    const mockError = new Error("mockError");
    axios.post.mockRejectedValue(Promise.reject(mockError)); // Use Promises explicitly

    await expect(postSaveData()).rejects.toThrow("mockError");

    // Verify function calls
    expect(store.getState).toHaveBeenCalled();
    expect(PreApprovalUtil.getFormConfigPayload).toHaveBeenCalled();
    expect(PreApprovalUtil.getAckMetaData).toHaveBeenCalledWith("testChannelRef");

    // Verify dispatchError call
    expect(dispatchError).toHaveBeenCalledWith(mockError);

    // Verify logging
    expect(console.log).toHaveBeenCalledWith("clientResponse", mockError);
  });
});

import axios from "axios";
import { store } from "../../../utils/store/store";
import PreApprovalUtil from "./preApprovalUtils";
import { dispatchError } from "../../../services/common-service";
import { postSaveData } from "./yourComponentFile";

jest.mock("axios");
jest.mock("../../../utils/store/store", () => ({
  store: {
    getState: jest.fn(),
  },
}));
jest.mock("./preApprovalUtils", () => ({
  getFormConfigPayload: jest.fn(),
  getAckMetaData: jest.fn(),
}));
jest.mock("../../../services/common-service", () => ({
  dispatchError: jest.fn(),
}));

describe("postSaveData", () => {
  beforeEach(() => {
    jest.clearAllMocks();
    process.env.REACT_APP_RTOB_BASE_URL = "http://baseurl.com";
    process.env.REACT_APP_RTOB_APPLICATION_END_POINT = "/application/";
    store.getState.mockReturnValue({
      stages: {
        stages: [
          {
            stageInfo: {
              application: {
                channel_reference: "testChannelRef",
              },
            },
          },
        ],
      },
    });
    PreApprovalUtil.getFormConfigPayload.mockReturnValue({ key: "value" });
    PreApprovalUtil.getAckMetaData.mockReturnValue("mockAckMetaData");
  });

  it("should make a successful POST request and resolve the response", async () => {
    const mockResponse = { data: "mockResponse" };
    axios.post.mockResolvedValue(mockResponse);

    const result = await postSaveData();

    expect(axios.post).toHaveBeenCalledWith(
      "http://baseurl.com/application/testChannelRef",
      JSON.stringify({ key: "value" }),
      expect.objectContaining({
        headers: {
          "Content-Type": "application/json;charset=UTF-8",
          "Sc-Client-Context": "mockAckMetaData",
        },
      })
    );
    expect(result).toEqual(mockResponse);
  });

  it("should catch an error and call dispatchError", async () => {
    const mockError = new Error("mockError");
    axios.post.mockRejectedValue(mockError);

    await expect(postSaveData()).rejects.toThrow("mockError");
    expect(dispatchError).toHaveBeenCalledWith(mockError);
  });
});


import { postSaveData, postDocSaveData, postBasicData, postAditionalData } from "./yourComponentFile";
import axios from "axios";
import { store } from "../../../utils/store/store";
import PreApprovalUtil from "./preApprovalUtils";
import { dispatchError } from "../../../services/common-service";

jest.mock("axios");
jest.mock("../../../utils/store/store", () => ({
  getState: jest.fn(() => ({
    stages: {
      stages: [
        {
          stageInfo: {
            application: {
              channel_reference: "test_channel_ref",
              application_reference: "test_application_ref",
            },
          },
        },
      ],
    },
  })),
}));
jest.mock("../../../services/common-service", () => ({
  dispatchError: jest.fn(),
}));
jest.mock("./preApprovalUtils", () => ({
  getFormConfigPayload: jest.fn(() => ({ applicants: {}, application: {} })),
  getAckMetaData: jest.fn(() => "mocked_meta_data"),
}));

describe("API Functions", () => {
  afterEach(() => {
    jest.clearAllMocks();
  });

  test("should successfully call postSaveData and resolve", async () => {
    const mockedResponse = { data: "success" };
    (axios.post as jest.Mock).mockResolvedValue(mockedResponse);

    const result = await postSaveData();

    expect(axios.post).toHaveBeenCalledWith(
      expect.stringContaining("test_channel_ref"),
      expect.any(String),
      { headers: expect.any(Object) }
    );
    expect(result).toEqual(mockedResponse);
  });

  test("should handle error in postSaveData", async () => {
    const mockedError = new Error("API Error");
    (axios.post as jest.Mock).mockRejectedValue(mockedError);

    await expect(postSaveData()).rejects.toThrow("API Error");
    expect(dispatchError).toHaveBeenCalledWith(mockedError);
  });

  test("should successfully call postDocSaveData with document data", async () => {
    const mockedResponse = { data: "document_saved" };
    const documentData = [{ docId: "doc1", documentName: "docName" }];
    const transactionData = { transactionId: "txn123", result: { resultMessage: "Success" } };

    (axios.post as jest.Mock).mockResolvedValue(mockedResponse);

    const result = await postDocSaveData(documentData, transactionData);

    expect(axios.post).toHaveBeenCalledWith(
      expect.stringContaining("test_channel_ref"),
      expect.stringContaining('"ekycdocId":"doc1"'),
      { headers: expect.any(Object) }
    );
    expect(result).toEqual(mockedResponse);
  });

  test("should handle error in postDocSaveData", async () => {
    const mockedError = new Error("Document Save Error");
    (axios.post as jest.Mock).mockRejectedValue(mockedError);

    await expect(postDocSaveData([], {})).rejects.toThrow("Document Save Error");
    expect(dispatchError).toHaveBeenCalledWith(mockedError);
  });

  test("should successfully call postBasicData", async () => {
    const mockedResponse = { data: "basic_data_saved" };
    (axios.post as jest.Mock).mockResolvedValue(mockedResponse);

    const result = await postBasicData();

    expect(axios.post).toHaveBeenCalledWith(
      expect.stringContaining("test_channel_ref"),
      expect.any(String),
      { headers: expect.any(Object) }
    );
    expect(result).toEqual(mockedResponse);
  });

  test("should handle error in postBasicData", async () => {
    const mockedError = new Error("Basic Data Error");
    (axios.post as jest.Mock).mockRejectedValue(mockedError);

    await expect(postBasicData()).rejects.toThrow("Basic Data Error");
  });

  test("should successfully call postAditionalData", async () => {
    const mockedResponse = { data: "additional_data_saved" };
    (axios.post as jest.Mock).mockResolvedValue(mockedResponse);

    const result = await postAditionalData();

    expect(axios.post).toHaveBeenCalledWith(
      expect.stringContaining("test_channel_ref"),
      expect.any(String),
      { headers: expect.any(Object) }
    );
    expect(result).toEqual(mockedResponse);
  });

  test("should handle error in postAditionalData", async () => {
    const mockedError = new Error("Additional Data Error");
    (axios.post as jest.Mock).mockRejectedValue(mockedError);

    await expect(postAditionalData()).rejects.toThrow("Additional Data Error");
    expect(dispatchError).toHaveBeenCalledWith(mockedError);
  });
});


